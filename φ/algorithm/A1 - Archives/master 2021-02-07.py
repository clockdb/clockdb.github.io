# Libraries
from Ï†.models import *
from bs4 import BeautifulSoup
from io import StringIO
from datetime import date
from urllib.request import urlopen
import collections
import csv
import datetime
import glob
import html5lib
import json
import os
import pandas as pd
import pathlib
import pprint
import re
import requests
import urllib
import xml.etree.ElementTree as ET

# EntityCentralIndexKeys (cik)
EntityCentralIndexKeys = {
    'AAPL':    '320193',
    'LLY':    '59478',
}

# TradingSymbols
TradingSymbols = [
#    'AAPL',
    'LLY',
]
#
# scope
scopedperiods = [
    'lastyear',
    'secondlastyear',
#    'thirdlastyear',
#    'fourthlastyear',
#    'fifthlastyear',
#    'sixthlastyear',
#    'seventhlastyear',
]

BeginningBalances = 'yes'
Regularize = 'yes'
GetStockPrice = 'no'

# Marketstack API
params = {
    'access_key': 'ecae621d4718099f0d660a237c429450',
}

# GLs
IncomeStatement_GLs = []
ComprehensiveIncome_GLs = []
BalanceSheet_GLs = []
StockholdersEquity_GLs = []
CashFlow_GLs = []

#
SEC_Report = {
    #
    # income statements
    "CONDENSED CONSOLIDATED STATEMENTS OF INCOME",
    "CONDENSED CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS",
    "CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF OPERATIONS",
    "CONSOLIDATED STATEMENTS OF INCOME",
    "CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF OPERATIONS",
    "CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED RESULTS OF OPERATIONS",
    "CONSOLIDATED RESULTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF RESULTS OF OPERATIONS",
    "CONSOLIDATED STATEMENT OF RESULTS OF OPERATIONS (UNAUDITED)",
    #
    # comprehensive income
    "CONSOLIDATED CONDENSED STATEMENTS OF COMPREHENSIVE INCOME (LOSS)",
    "CONSOLIDATED CONDENSED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME",
    "CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED COMPREHENSIVE INCOME",
    "CONSOLIDATED COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF COMPREHENSIVE INCOME",
    "CONSOLIDATED STATEMENT OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (LOSS)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
    #
    # balance sheets
    "CONDENSED CONSOLIDATED BALANCE SHEETS",
    "CONDENSED CONSOLIDATED BALANCE SHEETS (UNAUDITED)",
    "CONSOLIDATED BALANCE SHEETS",
    "CONSOLIDATED CONDENSED BALANCE SHEETS",
    "CONSOLIDATED CONDENSED BALANCE SHEETS (UNAUDITED)",
    "CONSOLIDATED BALANCE SHEETS (UNAUDITED)",
    "CONSOLIDATED FINANCIAL POSITION",
    "CONSOLIDATED FINANCIAL POSITION (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF FINANCIAL POSITION",
    "CONSOLIDATED STATEMENT OF FINANCIAL POSITION (UNAUDITED)",
    #
    # shareholders equity
    "CHANGES IN CONSOLIDATED STOCKHOLDERS' EQUITY",
    "CHANGES IN CONSOLIDATED STOCKHOLDERS' EQUITY (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONDENSED CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF CHANGES IN STOCKHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENT OF CHANGES IN STOCKHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF EQUITY",
    "CONSOLIDATED CONDENSED STATEMENTS OF EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENT OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY STATEMENT",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY STATEMENT (UNAUDITED)",
    #
    # cash flows
    "CONDENSED CONSOLIDATED STATEMENTS OF CASH FLOWS",
    "CONDENSED CONSOLIDATED STATEMENTS OF CASH FLOWS (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF CASH FLOWS",
    "CONSOLIDATED CONDENSED STATEMENTS OF CASH FLOWS (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF CASH FLOW",
    "CONSOLIDATED STATEMENT OF CASH FLOW (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF CASH FLOWS",
    "CONSOLIDATED STATEMENTS OF CASH FLOWS (UNAUDITED)",
}

# clockdb
ARCH_IncomeStatement = {
    "CONDENSED CONSOLIDATED STATEMENTS OF INCOME",
    "CONDENSED CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS",
    "CONDENSED CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF OPERATIONS",
    "CONSOLIDATED STATEMENTS OF INCOME",
    "CONSOLIDATED STATEMENTS OF INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF OPERATIONS",
    "CONSOLIDATED STATEMENTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED RESULTS OF OPERATIONS",
    "CONSOLIDATED RESULTS OF OPERATIONS (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF RESULTS OF OPERATIONS",
    "CONSOLIDATED STATEMENT OF RESULTS OF OPERATIONS (UNAUDITED)",
}
ARCH_ComprehensiveIncome = {
    "CONSOLIDATED CONDENSED STATEMENTS OF COMPREHENSIVE INCOME (LOSS)",
    "CONSOLIDATED CONDENSED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME",
    "CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED COMPREHENSIVE INCOME",
    "CONSOLIDATED COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF COMPREHENSIVE INCOME",
    "CONSOLIDATED STATEMENT OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (LOSS)",
    "CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (LOSS) (UNAUDITED)",
}
ARCH_BalanceSheet = {
    "CONDENSED CONSOLIDATED BALANCE SHEETS",
    "CONDENSED CONSOLIDATED BALANCE SHEETS (UNAUDITED)",
    "CONSOLIDATED BALANCE SHEETS",
    "CONSOLIDATED BALANCE SHEETS (UNAUDITED)",
    "CONSOLIDATED FINANCIAL POSITION",
    "CONSOLIDATED FINANCIAL POSITION (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF FINANCIAL POSITION",
    "CONSOLIDATED STATEMENT OF FINANCIAL POSITION (UNAUDITED)",
}
ARCH_StockholdersEquity = {
    "CHANGES IN CONSOLIDATED STOCKHOLDERS' EQUITY",
    "CHANGES IN CONSOLIDATED STOCKHOLDERS' EQUITY (UNAUDITED)",
    "CONDENSED CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONDENSED CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF CHANGES IN STOCKHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENT OF CHANGES IN STOCKHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF EQUITY",
    "CONSOLIDATED CONDENSED STATEMENTS OF EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENT OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY STATEMENT",
    "CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY STATEMENT (UNAUDITED)",
}
ARCH_CashFlowStatement = {
    "CONDENSED CONSOLIDATED STATEMENTS OF CASH FLOWS",
    "CONDENSED CONSOLIDATED STATEMENTS OF CASH FLOWS (UNAUDITED)",
    "CONSOLIDATED CONDENSED STATEMENTS OF CASH FLOWS",
    "CONSOLIDATED CONDENSED STATEMENTS OF CASH FLOWS (UNAUDITED)",
    "CONSOLIDATED STATEMENT OF CASH FLOW",
    "CONSOLIDATED STATEMENT OF CASH FLOW (UNAUDITED)",
    "CONSOLIDATED STATEMENTS OF CASH FLOWS",
    "CONSOLIDATED STATEMENTS OF CASH FLOWS (UNAUDITED)",
}
ARCH_FinancialStatements = {
    'ARCH_IncomeStatement',
    'ARCH_ComprehensiveIncome',
    'ARCH_BalanceSheet',
    'ARCH_ShareholdersEquity',
    'ARCH_CashFlowStatement',
}

# industries 
Industries = {
    '100': 'AGRICULTURAL PRODUCTION-CROPS',
    '200': 'AGRICULTURAL PROD-LIVESTOCK & ANIMAL SPECIALTIES',
    '700': 'AGRICULTURAL SERVICES',
    '800': 'FORESTRY',
    '900': 'FISHING, HUNTING AND TRAPPING',
    '1000': 'METAL MINING',
    '1040': 'GOLD AND SILVER ORES',
    '1090': 'MISCELLANEOUS METAL ORES',
    '1220': 'BITUMINOUS COAL & LIGNITE MINING',
    '1221': 'BITUMINOUS COAL & LIGNITE SURFACE MINING',
    '1311': 'CRUDE PETROLEUM & NATURAL GAS',
    '1381': 'DRILLING OIL & GAS WELLS',
    '1382': 'OIL & GAS FIELD EXPLORATION SERVICES',
    '1389': 'OIL & GAS FIELD SERVICES, NEC',
    '1400': 'MINING & QUARRYING OF NONMETALLIC MINERALS (NO FUELS)',
    '1520': 'GENERAL BLDG CONTRACTORS - RESIDENTIAL BLDGS',
    '1531': 'OPERATIVE BUILDERS',
    '1540': 'GENERAL BLDG CONTRACTORS - NONRESIDENTIAL BLDGS',
    '1600': 'HEAVY CONSTRUCTION OTHER THAN BLDG CONST - CONTRACTORS',
    '1623': 'WATER, SEWER, PIPELINE, COMM & POWER LINE CONSTRUCTION',
    '1700': 'CONSTRUCTION - SPECIAL TRADE CONTRACTORS',
    '1731': 'ELECTRICAL WORK',
    '2000': 'FOOD AND KINDRED PRODUCTS',
    '2011': 'MEAT PACKING PLANTS',
    '2013': 'SAUSAGES & OTHER PREPARED MEAT PRODUCTS',
    '2015': 'POULTRY SLAUGHTERING AND PROCESSING',
    '2020': 'DAIRY PRODUCTS',
    '2024': 'ICE CREAM & FROZEN DESSERTS',
    '2030': 'CANNED, FROZEN & PRESERVD FRUIT, VEG & FOOD SPECIALTIES',
    '2033': 'CANNED, FRUITS, VEG, PRESERVES, JAMS & JELLIES',
    '2040': 'GRAIN MILL PRODUCTS',
    '2050': 'BAKERY PRODUCTS',
    '2052': 'COOKIES & CRACKERS',
    '2060': 'SUGAR & CONFECTIONERY PRODUCTS',
    '2070': 'FATS & OILS',
    '2080': 'BEVERAGES',
    '2082': 'MALT BEVERAGES',
    '2086': 'BOTTLED & CANNED SOFT DRINKS & CARBONATED WATERS',
    '2090': 'MISCELLANEOUS FOOD PREPARATIONS & KINDRED PRODUCTS',
    '2092': 'PREPARED FRESH OR FROZEN FISH & SEAFOODS',
    '2100': 'TOBACCO PRODUCTS',
    '2111': 'CIGARETTES',
    '2200': 'TEXTILE MILL PRODUCTS',
    '2211': 'BROADWOVEN FABRIC MILLS, COTTON',
    '2221': 'BROADWOVEN FABRIC MILLS, MAN MADE FIBER & SILK',
    '2250': 'KNITTING MILLS',
    '2253': 'KNIT OUTERWEAR MILLS',
    '2273': 'CARPETS & RUGS',
    '2300': 'APPAREL & OTHER FINISHD PRODS OF FABRICS & SIMILAR MATL',
    '2320': 'MENS & BOYS FURNISHGS, WORK CLOTHG, & ALLIED GARMENTS',
    '2330': 'WOMENS, MISSES, AND JUNIORS OUTERWEAR',
    '2340': 'WOMENS, MISSES, CHILDRENS & INFANTS UNDERGARMENTS',
    '2390': 'MISCELLANEOUS FABRICATED TEXTILE PRODUCTS',
    '2400': 'LUMBER & WOOD PRODUCTS (NO FURNITURE)',
    '2421': 'SAWMILLS & PLANTING MILLS, GENERAL',
    '2430': 'MILLWOOD, VENEER, PLYWOOD, & STRUCTURAL WOOD MEMBERS',
    '2451': 'MOBILE HOMES',
    '2452': 'PREFABRICATED WOOD BLDGS & COMPONENTS',
    '2510': 'HOUSEHOLD FURNITURE',
    '2511': 'WOOD HOUSEHOLD FURNITURE, (NO UPHOLSTERED)',
    '2520': 'OFFICE FURNITURE',
    '2522': 'OFFICE FURNITURE (NO WOOD)',
    '2531': 'PUBLIC BLDG & RELATED FURNITURE',
    '2540': 'PARTITIONS, SHELVG, LOCKERS, & OFFICE & STORE FIXTURES',
    '2590': 'MISCELLANEOUS FURNITURE & FIXTURES',
    '2600': 'PAPERS & ALLIED PRODUCTS',
    '2611': 'PULP MILLS',
    '2621': 'PAPER MILLS',
    '2631': 'PAPERBOARD MILLS',
    '2650': 'PAPERBOARD CONTAINERS & BOXES',
    '2670': 'CONVERTED PAPER & PAPERBOARD PRODS (NO CONTANERS/BOXES)',
    '2673': 'PLASTICS, FOIL & COATED PAPER BAGS',
    '2711': 'NEWSPAPERS: PUBLISHING OR PUBLISHING & PRINTING',
    '2721': 'PERIODICALS: PUBLISHING OR PUBLISHING & PRINTING',
    '2731': 'BOOKS: PUBLISHING OR PUBLISHING & PRINTING',
    '2732': 'BOOK PRINTING',
    '2741': 'MISCELLANEOUS PUBLISHING',
    '2750': 'COMMERCIAL PRINTING',
    '2761': 'MANIFOLD BUSINESS FORMS',
    '2771': 'GREETING CARDS',
    '2780': 'BLANKBOOKS, LOOSELEAF BINDERS & BOOKBINDG & RELATD WORK',
    '2790': 'SERVICE INDUSTRIES FOR THE PRINTING TRADE',
    '2800': 'CHEMICALS & ALLIED PRODUCTS',
    '2810': 'INDUSTRIAL INORGANIC CHEMICALS',
    '2820': 'PLASTIC MATERIAL, SYNTH RESIN/RUBBER, CELLULOS (NO GLASS)',
    '2821': 'PLASTIC MATERIALS, SYNTH RESINS & NONVULCAN ELASTOMERS',
    '2833': 'MEDICINAL CHEMICALS & BOTANICAL PRODUCTS',
    '2834': 'PHARMACEUTICAL PREPARATIONS',
    '2835': 'IN VITRO & IN VIVO DIAGNOSTIC SUBSTANCES',
    '2836': 'BIOLOGICAL PRODUCTS, (NO DISGNOSTIC SUBSTANCES)',
    '2840': 'SOAP, DETERGENTS, CLEANG PREPARATIONS, PERFUMES, COSMETICS',
    '2842': 'SPECIALTY CLEANING, POLISHING AND SANITATION PREPARATIONS',
    '2844': 'PERFUMES, COSMETICS & OTHER TOILET PREPARATIONS',
    '2851': 'PAINTS, VARNISHES, LACQUERS, ENAMELS & ALLIED PRODS',
    '2860': 'INDUSTRIAL ORGANIC CHEMICALS',
    '2870': 'AGRICULTURAL CHEMICALS',
    '2890': 'MISCELLANEOUS CHEMICAL PRODUCTS',
    '2891': 'ADHESIVES & SEALANTS',
    '2911': 'PETROLEUM REFINING',
    '2950': 'ASPHALT PAVING & ROOFING MATERIALS',
    '2990': 'MISCELLANEOUS PRODUCTS OF PETROLEUM & COAL',
    '3011': 'TIRES & INNER TUBES',
    '3021': 'RUBBER & PLASTICS FOOTWEAR',
    '3050': 'GASKETS, PACKG & SEALG DEVICES & RUBBER & PLASTICS HOSE',
    '3060': 'FABRICATED RUBBER PRODUCTS, NEC',
    '3080': 'MISCELLANEOUS PLASTICS PRODUCTS',
    '3081': 'UNSUPPORTED PLASTICS FILM & SHEET',
    '3086': 'PLASTICS FOAM PRODUCTS',
    '3089': 'PLASTICS PRODUCTS, NEC',
    '3100': 'LEATHER & LEATHER PRODUCTS',
    '3140': 'FOOTWEAR, (NO RUBBER)',
    '3211': 'FLAT GLASS',
    '3220': 'GLASS & GLASSWARE, PRESSED OR BLOWN',
    '3221': 'GLASS CONTAINERS',
    '3231': 'GLASS PRODUCTS, MADE OF PURCHASED GLASS',
    '3241': 'CEMENT, HYDRAULIC',
    '3250': 'STRUCTURAL CLAY PRODUCTS',
    '3260': 'POTTERY & RELATED PRODUCTS',
    '3270': 'CONCRETE, GYPSUM & PLASTER PRODUCTS',
    '3272': 'CONCRETE PRODUCTS, EXCEPT BLOCK & BRICK',
    '3281': 'CUT STONE & STONE PRODUCTS',
    '3290': 'ABRASIVE, ASBESTOS & MISC NONMETALLIC MINERAL PRODS',
    '3310': 'STEEL WORKS, BLAST FURNACES & ROLLING & FINISHING MILLS',
    '3312': 'STEEL WORKS, BLAST FURNACES & ROLLING MILLS (COKE OVENS)',
    '3317': 'STEEL PIPE & TUBES',
    '3320': 'IRON & STEEL FOUNDRIES',
    '3330': 'PRIMARY SMELTING & REFINING OF NONFERROUS METALS',
    '3334': 'PRIMARY PRODUCTION OF ALUMINUM',
    '3341': 'SECONDARY SMELTING & REFINING OF NONFERROUS METALS',
    '3350': 'ROLLING DRAWING & EXTRUDING OF NONFERROUS METALS',
    '3357': 'DRAWING & INSULATING OF NONFERROUS WIRE',
    '3360': 'NONFERROUS FOUNDRIES (CASTINGS)',
    '3390': 'MISCELLANEOUS PRIMARY METAL PRODUCTS',
    '3411': 'METAL CANS',
    '3412': 'METAL SHIPPING BARRELS, DRUMS, KEGS & PAILS',
    '3420': 'CUTLERY, HANDTOOLS & GENERAL HARDWARE',
    '3430': 'HEATING EQUIP, EXCEPT ELEC & WARM AIR; & PLUMBING FIXTURES',
    '3433': 'HEATING EQUIPMENT, EXCEPT ELECTRIC & WARM AIR FURNACES',
    '3440': 'FABRICATED STRUCTURAL METAL PRODUCTS',
    '3442': 'METAL DOORS, SASH, FRAMES, MOLDINGS & TRIM',
    '3443': 'FABRICATED PLATE WORK (BOILER SHOPS)',
    '3444': 'SHEET METAL WORK',
    '3448': 'PREFABRICATED METAL BUILDINGS & COMPONENTS',
    '3451': 'SCREW MACHINE PRODUCTS',
    '3452': 'BOLTS, NUTS, SCREWS, RIVETS & WASHERS',
    '3460': 'METAL FORGINGS & STAMPINGS',
    '3470': 'COATING, ENGRAVING & ALLIED SERVICES',
    '3480': 'ORDNANCE & ACCESSORIES, (NO VEHICLES/GUIDED MISSILES)',
    '3490': 'MISCELLANEOUS FABRICATED METAL PRODUCTS',
    '3510': 'ENGINES & TURBINES',
    '3523': 'FARM MACHINERY & EQUIPMENT',
    '3524': 'LAWN & GARDEN TRACTORS & HOME LAWN & GARDENS EQUIP',
    '3530': 'CONSTRUCTION, MINING & MATERIALS HANDLING MACHINERY & EQUIP',
    '3531': 'CONSTRUCTION MACHINERY & EQUIP',
    '3532': 'MINING MACHINERY & EQUIP (NO OIL & GAS FIELD MACH & EQUIP)',
    '3533': 'OIL & GAS FIELD MACHINERY & EQUIPMENT',
    '3537': 'INDUSTRIAL TRUCKS, TRACTORS, TRAILORS & STACKERS',
    '3540': 'METALWORKG MACHINERY & EQUIPMENT',
    '3541': 'MACHINE TOOLS, METAL CUTTING TYPES',
    '3550': 'SPECIAL INDUSTRY MACHINERY (NO METALWORKING MACHINERY)',
    '3555': 'PRINTING TRADES MACHINERY & EQUIPMENT',
    '3559': 'SPECIAL INDUSTRY MACHINERY, NEC',
    '3560': 'GENERAL INDUSTRIAL MACHINERY & EQUIPMENT',
    '3561': 'PUMPS & PUMPING EQUIPMENT',
    '3562': 'BALL & ROLLER BEARINGS',
    '3564': 'INDUSTRIAL & COMMERCIAL FANS & BLOWERS & AIR PURIFING EQUIP',
    '3567': 'INDUSTRIAL PROCESS FURNACES & OVENS',
    '3569': 'GENERAL INDUSTRIAL MACHINERY & EQUIPMENT, NEC',
    '3570': 'COMPUTER & OFFICE EQUIPMENT',
    '3571': 'ELECTRONIC COMPUTERS',
    '3572': 'COMPUTER STORAGE DEVICES',
    '3575': 'COMPUTER TERMINALS',
    '3576': 'COMPUTER COMMUNICATIONS EQUIPMENT',
    '3577': 'COMPUTER PERIPHERAL EQUIPMENT, NEC',
    '3578': 'CALCULATING & ACCOUNTING MACHINES (NO ELECTRONIC COMPUTERS)',
    '3579': 'OFFICE MACHINES, NEC',
    '3580': 'REFRIGERATION & SERVICE INDUSTRY MACHINERY',
    '3585': 'AIR-COND & WARM AIR HEATG EQUIP & COMM & INDL REFRIG EQUIP',
    '3590': 'MISC INDUSTRIAL & COMMERCIAL MACHINERY & EQUIPMENT',
    '3600': 'ELECTRONIC & OTHER ELECTRICAL EQUIPMENT (NO COMPUTER EQUIP)',
    '3612': 'POWER, DISTRIBUTION & SPECIALTY TRANSFORMERS',
    '3613': 'SWITCHGEAR & SWITCHBOARD APPARATUS',
    '3620': 'ELECTRICAL INDUSTRIAL APPARATUS',
    '3621': 'MOTORS & GENERATORS',
    '3630': 'HOUSEHOLD APPLIANCES',
    '3634': 'ELECTRIC HOUSEWARES & FANS',
    '3640': 'ELECTRIC LIGHTING & WIRING EQUIPMENT',
    '3651': 'HOUSEHOLD AUDIO & VIDEO EQUIPMENT',
    '3652': 'PHONOGRAPH RECORDS & PRERECORDED AUDIO TAPES & DISKS',
    '3661': 'TELEPHONE & TELEGRAPH APPARATUS',
    '3663': 'RADIO & TV BROADCASTING & COMMUNICATIONS EQUIPMENT',
    '3669': 'COMMUNICATIONS EQUIPMENT, NEC',
    '3670': 'ELECTRONIC COMPONENTS & ACCESSORIES',
    '3672': 'PRINTED CIRCUIT BOARDS',
    '3674': 'SEMICONDUCTORS & RELATED DEVICES',
    '3677': 'ELECTRONIC COILS, TRANSFORMERS & OTHER INDUCTORS',
    '3678': 'ELECTRONIC CONNECTORS',
    '3679': 'ELECTRONIC COMPONENTS, NEC',
    '3690': 'MISCELLANEOUS ELECTRICAL MACHINERY, EQUIPMENT & SUPPLIES',
    '3695': 'MAGNETIC & OPTICAL RECORDING MEDIA',
    '3711': 'MOTOR VEHICLES & PASSENGER CAR BODIES',
    '3713': 'TRUCK & BUS BODIES',
    '3714': 'MOTOR VEHICLE PARTS & ACCESSORIES',
    '3715': 'TRUCK TRAILERS',
    '3716': 'MOTOR HOMES',
    '3720': 'AIRCRAFT & PARTS',
    '3721': 'AIRCRAFT',
    '3724': 'AIRCRAFT ENGINES & ENGINE PARTS',
    '3728': 'AIRCRAFT PARTS & AUXILIARY EQUIPMENT, NEC',
    '3730': 'SHIP & BOAT BUILDING & REPAIRING',
    '3743': 'RAILROAD EQUIPMENT',
    '3751': 'MOTORCYCLES, BICYCLES & PARTS',
    '3760': 'GUIDED MISSILES & SPACE VEHICLES & PARTS',
    '3790': 'MISCELLANEOUS TRANSPORTATION EQUIPMENT',
    '3812': 'SEARCH, DETECTION, NAVAGATION, GUIDANCE, AERONAUTICAL SYS',
    '3821': 'LABORATORY APPARATUS & FURNITURE',
    '3822': 'AUTO CONTROLS FOR REGULATING RESIDENTIAL & COMML ENVIRONMENTS',
    '3823': 'INDUSTRIAL INSTRUMENTS FOR MEASUREMENT, DISPLAY, AND CONTROL',
    '3824': 'TOTALIZING FLUID METERS & COUNTING DEVICES',
    '3825': 'INSTRUMENTS FOR MEAS & TESTING OF ELECTRICITY & ELEC SIGNALS',
    '3826': 'LABORATORY ANALYTICAL INSTRUMENTS',
    '3827': 'OPTICAL INSTRUMENTS & LENSES',
    '3829': 'MEASURING & CONTROLLING DEVICES, NEC',
    '3841': 'SURGICAL & MEDICAL INSTRUMENTS & APPARATUS',
    '3842': 'ORTHOPEDIC, PROSTHETIC & SURGICAL APPLIANCES & SUPPLIES',
    '3843': 'DENTAL EQUIPMENT & SUPPLIES',
    '3844': 'X-RAY APPARATUS & TUBES & RELATED IRRADIATION APPARATUS',
    '3845': 'ELECTROMEDICAL & ELECTROTHERAPEUTIC APPARATUS',
    '3851': 'OPHTHALMIC GOODS',
    '3861': 'PHOTOGRAPHIC EQUIPMENT & SUPPLIES',
    '3873': 'WATCHES, CLOCKS, CLOCKWORK OPERATED DEVICES/PARTS',
    '3910': 'JEWELRY, SILVERWARE & PLATED WARE',
    '3911': 'JEWELRY, PRECIOUS METAL',
    '3931': 'MUSICAL INSTRUMENTS',
    '3942': 'DOLLS & STUFFED TOYS',
    '3944': 'GAMES, TOYS & CHILDRENS VEHICLES (NO DOLLS & BICYCLES)',
    '3949': 'SPORTING & ATHLETIC GOODS, NEC',
    '3950': 'PENS, PENCILS & OTHER ARTISTS MATERIALS',
    '3960': 'COSTUME JEWELRY & NOVELTIES',
    '3990': 'MISCELLANEOUS MANUFACTURING INDUSTRIES',
    '4011': 'RAILROADS, LINE-HAUL OPERATING',
    '4013': 'RAILROAD SWITCHING & TERMINAL ESTABLISHMENTS',
    '4100': 'LOCAL & SUBURBAN TRANSIT & INTERURBAN HWY PASSENGER TRANS',
    '4210': 'TRUCKING & COURIER SERVICES (NO AIR)',
    '4213': 'TRUCKING (NO LOCAL)',
    '4220': 'PUBLIC WAREHOUSING & STORAGE',
    '4231': 'TERMINAL MAINTENANCE FACILITIES FOR MOTOR FREIGHT TRANSPORT',
    '4400': 'WATER TRANSPORTATION',
    '4412': 'DEEP SEA FOREIGN TRANSPORTATION OF FREIGHT',
    '4512': 'AIR TRANSPORTATION, SCHEDULED',
    '4513': 'AIR COURIER SERVICES',
    '4522': 'AIR TRANSPORTATION, NONSCHEDULED',
    '4581': 'AIRPORTS, FLYING FIELDS & AIRPORT TERMINAL SERVICES',
    '4610': 'PIPE LINES (NO NATURAL GAS)',
    '4700': 'TRANSPORTATION SERVICES',
    '4731': 'ARRANGEMENT OF TRANSPORTATION OF FREIGHT & CARGO',
    '4812': 'RADIOTELEPHONE COMMUNICATIONS',
    '4813': 'TELEPHONE COMMUNICATIONS (NO RADIOTELEPHONE)',
    '4822': 'TELEGRAPH & OTHER MESSAGE COMMUNICATIONS',
    '4832': 'RADIO BROADCASTING STATIONS',
    '4833': 'TELEVISION BROADCASTING STATIONS',
    '4841': 'CABLE & OTHER PAY TELEVISION SERVICES',
    '4899': 'COMMUNICATIONS SERVICES, NEC',
    '4900': 'ELECTRIC, GAS & SANITARY SERVICES',
    '4911': 'ELECTRIC SERVICES',
    '4922': 'NATURAL GAS TRANSMISSION',
    '4923': 'NATURAL GAS TRANSMISISON & DISTRIBUTION',
    '4924': 'NATURAL GAS DISTRIBUTION',
    '4931': 'ELECTRIC & OTHER SERVICES COMBINED',
    '4932': 'GAS & OTHER SERVICES COMBINED',
    '4941': 'WATER SUPPLY',
    '4950': 'SANITARY SERVICES',
    '4953': 'REFUSE SYSTEMS',
    '4955': 'HAZARDOUS WASTE MANAGEMENT',
    '4961': 'STEAM & AIR-CONDITIONING SUPPLY',
    '4991': 'COGENERATION SERVICES & SMALL POWER PRODUCERS',
    '5000': 'WHOLESALE-DURABLE GOODS',
    '5010': 'WHOLESALE-MOTOR VEHICLES & MOTOR VEHICLE PARTS & SUPPLIES',
    '5013': 'WHOLESALE-MOTOR VEHICLE SUPPLIES & NEW PARTS',
    '5020': 'WHOLESALE-FURNITURE & HOME FURNISHINGS',
    '5030': 'WHOLESALE-LUMBER & OTHER CONSTRUCTION MATERIALS',
    '5031': 'WHOLESALE-LUMBER, PLYWOOD, MILLWORK & WOOD PANELS',
    '5040': 'WHOLESALE-PROFESSIONAL & COMMERCIAL EQUIPMENT & SUPPLIES',
    '5045': 'WHOLESALE-COMPUTERS & PERIPHERAL EQUIPMENT & SOFTWARE',
    '5047': 'WHOLESALE-MEDICAL, DENTAL & HOSPITAL EQUIPMENT & SUPPLIES',
    '5050': 'WHOLESALE-METALS & MINERALS (NO PETROLEUM)',
    '5051': 'WHOLESALE-METALS SERVICE CENTERS & OFFICES',
    '5063': 'WHOLESALE-ELECTRICAL APPARATUS & EQUIPMENT, WIRING SUPPLIES',
    '5064': 'WHOLESALE-ELECTRICAL APPLIANCES, TV & RADIO SETS',
    '5065': 'WHOLESALE-ELECTRONIC PARTS & EQUIPMENT, NEC',
    '5070': 'WHOLESALE-HARDWARE & PLUMBING & HEATING EQUIPMENT & SUPPLIES',
    '5072': 'WHOLESALE-HARDWARE',
    '5080': 'WHOLESALE-MACHINERY, EQUIPMENT & SUPPLIES',
    '5082': 'WHOLESALE-CONSTRUCTION & MINING (NO PETRO) MACHINERY & EQUIP',
    '5084': 'WHOLESALE-INDUSTRIAL MACHINERY & EQUIPMENT',
    '5090': 'WHOLESALE-MISC DURABLE GOODS',
    '5094': 'WHOLESALE-JEWELRY, WATCHES, PRECIOUS STONES & METALS',
    '5099': 'WHOLESALE-DURABLE GOODS, NEC',
    '5110': 'WHOLESALE-PAPER & PAPER PRODUCTS',
    '5122': 'WHOLESALE-DRUGS, PROPRIETARIES & DRUGGISTS SUNDRIES',
    '5130': 'WHOLESALE-APPAREL, PIECE GOODS & NOTIONS',
    '5140': 'WHOLESALE-GROCERIES & RELATED PRODUCTS',
    '5141': 'WHOLESALE-GROCERIES, GENERAL LINE',
    '5150': 'WHOLESALE-FARM PRODUCT RAW MATERIALS',
    '5160': 'WHOLESALE-CHEMICALS & ALLIED PRODUCTS',
    '5171': 'WHOLESALE-PETROLEUM BULK STATIONS & TERMINALS',
    '5172': 'WHOLESALE-PETROLEUM & PETROLEUM PRODUCTS (NO BULK STATIONS)',
    '5180': 'WHOLESALE-BEER, WINE & DISTILLED ALCOHOLIC BEVERAGES',
    '5190': 'WHOLESALE-MISCELLANEOUS NONDURABLE GOODS',
    '5200': 'RETAIL-BUILDING MATERIALS, HARDWARE, GARDEN SUPPLY',
    '5211': 'RETAIL-LUMBER & OTHER BUILDING MATERIALS DEALERS',
    '5271': 'RETAIL-MOBILE HOME DEALERS',
    '5311': 'RETAIL-DEPARTMENT STORES',
    '5331': 'RETAIL-VARIETY STORES',
    '5399': 'RETAIL-MISC GENERAL MERCHANDISE STORES',
    '5400': 'RETAIL-FOOD STORES',
    '5411': 'RETAIL-GROCERY STORES',
    '5412': 'RETAIL-CONVENIENCE STORES',
    '5500': 'RETAIL-AUTO DEALERS & GASOLINE STATIONS',
    '5531': 'RETAIL-AUTO & HOME SUPPLY STORES',
    '5600': 'RETAIL-APPAREL & ACCESSORY STORES',
    '5621': 'RETAIL-WOMENS CLOTHING STORES',
    '5651': 'RETAIL-FAMILY CLOTHING STORES',
    '5661': 'RETAIL-SHOE STORES',
    '5700': 'RETAIL-HOME FURNITURE, FURNISHINGS & EQUIPMENT STORES',
    '5712': 'RETAIL-FURNITURE STORES',
    '5731': 'RETAIL-RADIO, TV & CONSUMER ELECTRONICS STORES',
    '5734': 'RETAIL-COMPUTER & COMPUTER SOFTWARE STORES',
    '5735': 'RETAIL-RECORD & PRERECORDED TAPE STORES',
    '5810': 'RETAIL-EATING & DRINKING PLACES',
    '5812': 'RETAIL-EATING PLACES',
    '5900': 'RETAIL-MISCELLANEOUS RETAIL',
    '5912': 'RETAIL-DRUG STORES AND PROPRIETARY STORES',
    '5940': 'RETAIL-MISCELLANEOUS SHOPPING GOODS STORES',
    '5944': 'RETAIL-JEWELRY STORES',
    '5945': 'RETAIL-HOBBY, TOY & GAME SHOPS',
    '5960': 'RETAIL-NONSTORE RETAILERS',
    '5961': 'RETAIL-CATALOG & MAIL-ORDER HOUSES',
    '5990': 'RETAIL-RETAIL STORES, NEC',
    '6021': 'NATIONAL COMMERCIAL BANKS',
    '6022': 'STATE COMMERCIAL BANKS',
    '6029': 'COMMERCIAL BANKS, NEC',
    '6035': 'SAVINGS INSTITUTION, FEDERALLY CHARTERED',
    '6036': 'SAVINGS INSTITUTIONS, NOT FEDERALLY CHARTERED',
    '6099': 'FUNCTIONS RELATED TO DEPOSITORY BANKING, NEC',
    '6111': 'FEDERAL & FEDERALLY-SPONSORED CREDIT AGENCIES',
    '6141': 'PERSONAL CREDIT INSTITUTIONS',
    '6153': 'SHORT-TERM BUSINESS CREDIT INSTITUTIONS',
    '6159': 'MISCELLANEOUS BUSINESS CREDIT INSTITUTION',
    '6162': 'MORTGAGE BANKERS & LOAN CORRESPONDENTS',
    '6163': 'LOAN BROKERS',
    '6172': 'FINANCE LESSORS',
    '6189': 'ASSET-BACKED SECURITIES',
    '6199': 'FINANCE SERVICES',
    '6200': 'SECURITY & COMMODITY BROKERS, DEALERS, EXCHANGES & SERVICES',
    '6211': 'SECURITY BROKERS, DEALERS & FLOTATION COMPANIES',
    '6221': 'COMMODITY CONTRACTS BROKERS & DEALERS',
    '6282': 'INVESTMENT ADVICE',
    '6311': 'LIFE INSURANCE',
    '6321': 'ACCIDENT & HEALTH INSURANCE',
    '6324': 'HOSPITAL & MEDICAL SERVICE PLANS',
    '6331': 'FIRE, MARINE & CASUALTY INSURANCE',
    '6351': 'SURETY INSURANCE',
    '6361': 'TITLE INSURANCE',
    '6399': 'INSURANCE CARRIERS, NEC',
    '6411': 'INSURANCE AGENTS, BROKERS & SERVICE',
    '6500': 'REAL ESTATE',
    '6510': 'REAL ESTATE OPERATORS (NO DEVELOPERS) & LESSORS',
    '6512': 'OPERATORS OF NONRESIDENTIAL BUILDINGS',
    '6513': 'OPERATORS OF APARTMENT BUILDINGS',
    '6519': 'LESSORS OF REAL PROPERTY, NEC',
    '6531': 'REAL ESTATE AGENTS & MANAGERS (FOR OTHERS)',
    '6532': 'REAL ESTATE DEALERS (FOR THEIR OWN ACCOUNT)',
    '6552': 'LAND SUBDIVIDERS & DEVELOPERS (NO CEMETERIES)',
    '6770': 'BLANK CHECKS',
    '6792': 'OIL ROYALTY TRADERS',
    '6794': 'PATENT OWNERS & LESSORS',
    '6795': 'MINERAL ROYALTY TRADERS',
    '6798': 'REAL ESTATE INVESTMENT TRUSTS',
    '6799': 'INVESTORS, NEC',
    '7000': 'HOTELS, ROOMING HOUSES, CAMPS & OTHER LODGING PLACES',
    '7011': 'HOTELS & MOTELS',
    '7200': 'SERVICES-PERSONAL SERVICES',
    '7310': 'SERVICES-ADVERTISING',
    '7311': 'SERVICES-ADVERTISING AGENCIES',
    '7320': 'SERVICES-CONSUMER CREDIT REPORTING, COLLECTION AGENCIES',
    '7330': 'SERVICES-MAILING, REPRODUCTION, COMMERCIAL ART & PHOTOGRAPHY',
    '7331': 'SERVICES-DIRECT MAIL ADVERTISING SERVICES',
    '7340': 'SERVICES-TO DWELLINGS & OTHER BUILDINGS',
    '7350': 'SERVICES-MISCELLANEOUS EQUIPMENT RENTAL & LEASING',
    '7359': 'SERVICES-EQUIPMENT RENTAL & LEASING, NEC',
    '7361': 'SERVICES-EMPLOYMENT AGENCIES',
    '7363': 'SERVICES-HELP SUPPLY SERVICES',
    '7370': 'SERVICES-COMPUTER PROGRAMMING, DATA PROCESSING, ETC.',
    '7371': 'SERVICES-COMPUTER PROGRAMMING SERVICES',
    '7372': 'SERVICES-PREPACKAGED SOFTWARE',
    '7373': 'SERVICES-COMPUTER INTEGRATED SYSTEMS DESIGN',
    '7374': 'SERVICES-COMPUTER PROCESSING & DATA PREPARATION',
    '7377': 'SERVICES-COMPUTER RENTAL & LEASING',
    '7380': 'SERVICES-MISCELLANEOUS BUSINESS SERVICES',
    '7381': 'SERVICES-DETECTIVE, GUARD & ARMORED CAR SERVICES',
    '7384': 'SERVICES-PHOTOFINISHING LABORATORIES',
    '7385': 'SERVICES-TELEPHONE INTERCONNECT SYSTEMS',
    '7389': 'SERVICES-BUSINESS SERVICES, NEC',
    '7500': 'SERVICES-AUTOMOTIVE REPAIR, SERVICES & PARKING',
    '7510': 'SERVICES-AUTO RENTAL & LEASING (NO DRIVERS)',
    '7600': 'SERVICES-MISCELLANEOUS REPAIR SERVICES',
    '7812': 'SERVICES-MOTION PICTURE & VIDEO TAPE PRODUCTION',
    '7819': 'SERVICES-ALLIED TO MOTION PICTURE PRODUCTION',
    '7822': 'SERVICES-MOTION PICTURE & VIDEO TAPE DISTRIBUTION',
    '7829': 'SERVICES-ALLIED TO MOTION PICTURE DISTRIBUTION',
    '7830': 'SERVICES-MOTION PICTURE THEATERS',
    '7841': 'SERVICES-VIDEO TAPE RENTAL',
    '7900': 'SERVICES-AMUSEMENT & RECREATION SERVICES',
    '7948': 'SERVICES-RACING, INCLUDING TRACK OPERATION',
    '7990': 'SERVICES-MISCELLANEOUS AMUSEMENT & RECREATION',
    '7997': 'SERVICES-MEMBERSHIP SPORTS & RECREATION CLUBS',
    '8000': 'SERVICES-HEALTH SERVICES',
    '8011': 'SERVICES-OFFICES & CLINICS OF DOCTORS OF MEDICINE',
    '8050': 'SERVICES-NURSING & PERSONAL CARE FACILITIES',
    '8051': 'SERVICES-SKILLED NURSING CARE FACILITIES',
    '8060': 'SERVICES-HOSPITALS',
    '8062': 'SERVICES-GENERAL MEDICAL & SURGICAL HOSPITALS, NEC',
    '8071': 'SERVICES-MEDICAL LABORATORIES',
    '8082': 'SERVICES-HOME HEALTH CARE SERVICES',
    '8090': 'SERVICES-MISC HEALTH & ALLIED SERVICES, NEC',
    '8093': 'SERVICES-SPECIALTY OUTPATIENT FACILITIES, NEC',
    '8111': 'SERVICES-LEGAL SERVICES',
    '8200': 'SERVICES-EDUCATIONAL SERVICES',
    '8300': 'SERVICES-SOCIAL SERVICES',
    '8351': 'SERVICES-CHILD DAY CARE SERVICES',
    '8600': 'SERVICES-MEMBERSHIP ORGANIZATIONS',
    '8700': 'SERVICES-ENGINEERING, ACCOUNTING, RESEARCH, MANAGEMENT',
    '8711': 'SERVICES-ENGINEERING SERVICES',
    '8731': 'SERVICES-COMMERCIAL PHYSICAL & BIOLOGICAL RESEARCH',
    '8734': 'SERVICES-TESTING LABORATORIES',
    '8741': 'SERVICES-MANAGEMENT SERVICES',
    '8742': 'SERVICES-MANAGEMENT CONSULTING SERVICES',
    '8744': 'SERVICES-FACILITIES SUPPORT MANAGEMENT SERVICES',
    '8880': 'AMERICAN DEPOSITARY RECEIPTS',
    '8888': 'FOREIGN GOVERNMENTS',
    '8900': 'SERVICES-SERVICES, NEC',
    '9721': 'INTERNATIONAL AFFAIRS',
    '9995': 'NON-OPERATING ESTABLISHMENTS',
}

# regions 
Regions = {
    'AL': 'ALABAMA',
    'AK': 'ALASKA',
    'AZ': 'ARIZONA',
    'AR': 'ARKANSAS',
    'CA': 'CALIFORNIA',
    'CO': 'COLORADO',
    'CT': 'CONNECTICUT',
    'DE': 'DELAWARE',
    'DC': 'DISTRICT OF COLUMBIA',
    'FL': 'FLORIDA',
    'GA': 'GEORGIA',
    'HI': 'HAWAII',
    'ID': 'IDAHO',
    'IL': 'ILLINOIS',
    'IN': 'INDIANA',
    'IA': 'IOWA',
    'KS': 'KANSAS',
    'KY': 'KENTUCKY',
    'LA': 'LOUISIANA',
    'ME': 'MAINE',
    'MD': 'MARYLAND',
    'MA': 'MASSACHUSETTS',
    'MI': 'MICHIGAN',
    'MN': 'MINNESOTA',
    'MS': 'MISSISSIPPI',
    'MO': 'MISSOURI',
    'MT': 'MONTANA',
    'NE': 'NEBRASKA',
    'NV': 'NEVADA',
    'NH': 'NEW HAMPSHIRE',
    'NJ': 'NEW JERSEY',
    'NM': 'NEW MEXICO',
    'NY': 'NEW YORK',
    'NC': 'NORTH CAROLINA',
    'ND': 'NORTH DAKOTA',
    'OH': 'OHIO',
    'OK': 'OKLAHOMA',
    'OR': 'OREGON',
    'PA': 'PENNSYLVANIA',
    'RI': 'RHODE ISLAND',
    'SC': 'SOUTH CAROLINA',
    'SD': 'SOUTH DAKOTA',
    'TN': 'TENNESSEE',
    'TX': 'TEXAS',
    'X1': 'UNITED STATES',
    'UT': 'UTAH',
    'VT': 'VERMONT',
    'VA': 'VIRGINIA',
    'WA': 'WASHINGTON',
    'WV': 'WEST VIRGINIA',
    'WI': 'WISCONSIN',
    'WY': 'WYOMING',
    'A0': 'ALBERTA, CANADA',
    'A1': 'BRITISH COLUMBIA, CANADA',
    'A2': 'MANITOBA, CANADA',
    'A3': 'NEW BRUNSWICK, CANADA',
    'A4': 'NEWFOUNDLAND, CANADA',
    'A5': 'NOVA SCOTIA, CANADA',
    'A6': 'ONTARIO, CANADA',
    'A7': 'PRINCE EDWARD ISLAND, CANADA',
    'A8': 'QUEBEC, CANADA',
    'A9': 'SASKATCHEWAN, CANADA',
    'B0': 'YUKON, CANADA',
    'Z4': 'CANADA (Federal Level)',
    'B2': 'AFGHANISTAN',
    'Y6': 'ALAND ISLANDS',
    'B3': 'ALBANIA',
    'B4': 'ALGERIA',
    'B5': 'AMERICAN SAMOA',
    'B6': 'ANDORRA',
    'B7': 'ANGOLA',
    '1A': 'ANGUILLA',
    'B8': 'ANTARCTICA',
    'B9': 'ANTIGUA AND BARBUDA',
    'C1': 'ARGENTINA',
    '1B': 'ARMENIA',
    '1C': 'ARUBA',
    'C3': 'AUSTRALIA',
    'C4': 'AUSTRIA',
    '1D': 'AZERBAIJAN',
    'C5': 'BAHAMAS',
    'C6': 'BAHRAIN',
    'C7': 'BANGLADESH',
    'C8': 'BARBADOS',
    '1F': 'BELARUS',
    'C9': 'BELGIUM',
    'D1': 'BELIZE',
    'G6': 'BENIN',
    'D0': 'BERMUDA',
    'D2': 'BHUTAN',
    'D3': 'BOLIVIA',
    '1E': 'BOSNIA AND HERZEGOVINA',
    'B1': 'BOTSWANA',
    'D4': 'BOUVET ISLAND',
    'D5': 'BRAZIL',
    'D6': 'BRITISH INDIAN OCEAN TERRITORY',
    'D9': 'BRUNEI DARUSSALAM',
    'E0': 'BULGARIA',
    'X2': 'BURKINA FASO',
    'E2': 'BURUNDI',
    'E3': 'CAMBODIA',
    'E4': 'CAMEROON',
    'Z4': 'CANADA (Federal Level)',
    'E8': 'CAPE VERDE',
    'E9': 'CAYMAN ISLANDS',
    'F0': 'CENTRAL AFRICAN REPUBLIC',
    'F2': 'CHAD',
    'F3': 'CHILE',
    'F4': 'CHINA',
    'F6': 'CHRISTMAS ISLAND',
    'F7': 'COCOS (KEELING) ISLANDS',
    'F8': 'COLOMBIA',
    'F9': 'COMOROS',
    'G0': 'CONGO',
    'Y3': 'CONGO, THE DEMOCRATIC REPUBLIC OF THE',
    'G1': 'COOK ISLANDS',
    'G2': 'COSTA RICA',
    'L7': 'COTE DIVOIRE',
    '1M': 'CROATIA',
    'G3': 'CUBA',
    'G4': 'CYPRUS',
    '2N': 'CZECH REPUBLIC',
    'G7': 'DENMARK',
    '1G': 'DJIBOUTI',
    'G9': 'DOMINICA',
    'G8': 'DOMINICAN REPUBLIC',
    'H1': 'ECUADOR',
    'H2': 'EGYPT',
    'H3': 'EL SALVADOR',
    'H4': 'EQUATORIAL GUINEA',
    '1J': 'ERITREA',
    '1H': 'ESTONIA',
    'H5': 'ETHIOPIA',
    'H7': 'FALKLAND ISLANDS (MALVINAS)',
    'H6': 'FAROE ISLANDS',
    'H8': 'FIJI',
    'H9': 'FINLAND',
    'I0': 'FRANCE',
    'I3': 'FRENCH GUIANA',
    'I4': 'FRENCH POLYNESIA',
    '2C': 'FRENCH SOUTHERN TERRITORIES',
    'I5': 'GABON',
    'I6': 'GAMBIA',
    '2Q': 'GEORGIA',
    '2M': 'GERMANY',
    'J0': 'GHANA',
    'J1': 'GIBRALTAR',
    'J3': 'GREECE',
    'J4': 'GREENLAND',
    'J5': 'GRENADA',
    'J6': 'GUADELOUPE',
    'GU': 'GUAM',
    'J8': 'GUATEMALA',
    'Y7': 'GUERNSEY',
    'J9': 'GUINEA',
    'S0': 'GUINEA-BISSAU',
    'K0': 'GUYANA',
    'K1': 'HAITI',
    'K4': 'HEARD ISLAND AND MCDONALD ISLANDS',
    'X4': 'HOLY SEE (VATICAN CITY STATE)',
    'K2': 'HONDURAS',
    'K3': 'HONG KONG',
    'K5': 'HUNGARY',
    'K6': 'ICELAND',
    'K7': 'INDIA',
    'K8': 'INDONESIA',
    'K9': 'IRAN, ISLAMIC REPUBLIC OF',
    'L0': 'IRAQ',
    'L2': 'IRELAND',
    'Y8': 'ISLE OF MAN',
    'L3': 'ISRAEL',
    'L6': 'ITALY',
    'L8': 'JAMAICA',
    'M0': 'JAPAN',
    'Y9': 'JERSEY',
    'M2': 'JORDAN',
    '1P': 'KAZAKSTAN',
    'M3': 'KENYA',
    'J2': 'KIRIBATI',
    'M4': 'KOREA, DEMOCRATIC PEOPLES REPUBLIC OF',
    'M5': 'KOREA, REPUBLIC OF',
    'M6': 'KUWAIT',
    '1N': 'KYRGYZSTAN',
    'M7': 'LAO PEOPLES DEMOCRATIC REPUBLIC',
    '1R': 'LATVIA',
    'M8': 'LEBANON',
    'M9': 'LESOTHO',
    'N0': 'LIBERIA',
    'N1': 'LIBYAN ARAB JAMAHIRIYA',
    'N2': 'LIECHTENSTEIN',
    '1Q': 'LITHUANIA',
    'N4': 'LUXEMBOURG',
    'N5': 'MACAU',
    '1U': 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF',
    'N6': 'MADAGASCAR',
    'N7': 'MALAWI',
    'N8': 'MALAYSIA',
    'N9': 'MALDIVES',
    'O0': 'MALI',
    'O1': 'MALTA',
    '1T': 'MARSHALL ISLANDS',
    'O2': 'MARTINIQUE',
    'O3': 'MAURITANIA',
    'O4': 'MAURITIUS',
    '2P': 'MAYOTTE',
    'O5': 'MEXICO',
    '1K': 'MICRONESIA, FEDERATED STATES OF',
    '1S': 'MOLDOVA, REPUBLIC OF',
    'O9': 'MONACO',
    'P0': 'MONGOLIA',
    'Z5': 'MONTENEGRO',
    'P1': 'MONTSERRAT',
    'P2': 'MOROCCO',
    'P3': 'MOZAMBIQUE',
    'E1': 'MYANMAR',
    'T6': 'NAMIBIA',
    'P5': 'NAURU',
    'P6': 'NEPAL',
    'P7': 'NETHERLANDS',
    'P8': 'NETHERLANDS ANTILLES',
    '1W': 'NEW CALEDONIA',
    'Q2': 'NEW ZEALAND',
    'Q3': 'NICARAGUA',
    'Q4': 'NIGER',
    'Q5': 'NIGERIA',
    'Q6': 'NIUE',
    'Q7': 'NORFOLK ISLAND',
    '1V': 'NORTHERN MARIANA ISLANDS',
    'Q8': 'NORWAY',
    'P4': 'OMAN',
    'R0': 'PAKISTAN',
    '1Y': 'PALAU',
    '1X': 'PALESTINIAN TERRITORY, OCCUPIED',
    'R1': 'PANAMA',
    'R2': 'PAPUA NEW GUINEA',
    'R4': 'PARAGUAY',
    'R5': 'PERU',
    'R6': 'PHILIPPINES',
    'R8': 'PITCAIRN',
    'R9': 'POLAND',
    'S1': 'PORTUGAL',
    'PR': 'PUERTO RICO',
    'S3': 'QATAR',
    'S4': 'REUNION',
    'S5': 'ROMANIA',
    '1Z': 'RUSSIAN FEDERATION',
    'S6': 'RWANDA',
    'Z0': 'SAINT BARTHELEMY',
    'U8': 'SAINT HELENA',
    'U7': 'SAINT KITTS AND NEVIS',
    'U9': 'SAINT LUCIA',
    'Z1': 'SAINT MARTIN',
    'V0': 'SAINT PIERRE AND MIQUELON',
    'V1': 'SAINT VINCENT AND THE GRENADINES',
    'Y0': 'SAMOA',
    'S8': 'SAN MARINO',
    'S9': 'SAO TOME AND PRINCIPE',
    'T0': 'SAUDI ARABIA',
    'T1': 'SENEGAL',
    'Z2': 'SERBIA',
    'T2': 'SEYCHELLES',
    'T8': 'SIERRA LEONE',
    'U0': 'SINGAPORE',
    '2B': 'SLOVAKIA',
    '2A': 'SLOVENIA',
    'D7': 'SOLOMON ISLANDS',
    'U1': 'SOMALIA',
    'T3': 'SOUTH AFRICA',
    '1L': 'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS',
    'U3': 'SPAIN',
    'F1': 'SRI LANKA',
    'V2': 'SUDAN',
    'V3': 'SURINAME',
    'L9': 'SVALBARD AND JAN MAYEN',
    'V6': 'SWAZILAND',
    'V7': 'SWEDEN',
    'V8': 'SWITZERLAND',
    'V9': 'SYRIAN ARAB REPUBLIC',
    'F5': 'TAIWAN, PROVINCE OF CHINA',
    '2D': 'TAJIKISTAN',
    'W0': 'TANZANIA, UNITED REPUBLIC OF',
    'W1': 'THAILAND',
    'Z3': 'TIMOR-LESTE',
    'W2': 'TOGO',
    'W3': 'TOKELAU',
    'W4': 'TONGA',
    'W5': 'TRINIDAD AND TOBAGO',
    'W6': 'TUNISIA',
    'W8': 'TURKEY',
    '2E': 'TURKMENISTAN',
    'W7': 'TURKS AND CAICOS ISLANDS',
    '2G': 'TUVALU',
    'W9': 'UGANDA',
    '2H': 'UKRAINE',
    'C0': 'UNITED ARAB EMIRATES',
    'X0': 'UNITED KINGDOM',
    '2J': 'UNITED STATES MINOR OUTLYING ISLANDS',
    'X3': 'URUGUAY',
    '2K': 'UZBEKISTAN',
    '2L': 'VANUATU',
    'X5': 'VENEZUELA',
    'Q1': 'VIET NAM',
    'D8': 'VIRGIN ISLANDS, BRITISH',
    'VI': 'VIRGIN ISLANDS, U.S.',
    'X8': 'WALLIS AND FUTUNA',
    'U5': 'WESTERN SAHARA',
    'T7': 'YEMEN',
    'Y4': 'ZAMBIA',
    'Y5': 'ZIMBABWE',
    'XX': 'UNKNOWN',
}

Quarters = {
    'lastquarter',
    'secondlastquarter',
    'thirdlastquarter',
}

# BeautifulSoup parser
def fetch(url):
    thepage = urllib.request.urlopen(url)
    soupdata = BeautifulSoup(thepage,"html.parser")
    return soupdata

# Append values if key already exists
def append_value(dict_obj, key, value):
    # Check if key exist in dict or not
    if key in dict_obj:
        if not isinstance(dict_obj[key], list):
            dict_obj[key] = [dict_obj[key]]
        dict_obj[key].append(value)
    else:
        dict_obj[key] = value

#
# model corporation
try:
    try:
        Entity.objects.get(TradingSymbol='MODEL').delete()
    except:
        pass
    #
    m = Entity()
    #
    m.TradingSymbol='MODELS'
    m.EntityRegistrantName = 'CLOCK'
    m.Industry = 'DATA PROCESSING, AUDIT, BUSINESS VALUATION'
    m.EntityIncorporationStateCountryCode = 'NEW YORK'
    m.Region = 'CALIFORNIA'
    m.CurrentFiscalYearEndDate = '12-31'
    m.SecurityExchangeName = 'Security Exchange Name'
    m.Regulator = 'Regulator'
    #
    m.lastquarter = 'September 31, 2020'
    m.secondlastquarter = 'June 31, 2020'
    m.thirdlastquarter = 'March 31, 2020'
    #
    m.lastyear = 'December 31, 2020'
    m.secondlastyear = 'December 31, 2019'
    m.thirdlastyear = 'December 31, 2018'
    m.fourthlastyear = 'December 31, 2017'
    m.fifthlastyear = 'December 31, 2016'
    m.sixthlastyear = 'December 31, 2015'
    m.seventhlastyear = 'December 31, 2014'
    m.save()
    #
    # Trial Balance
    #
    for scopedperiod in scopedperiods:
        try:
            TrialBalance.objects.get(TradingSymbol='MODEL', Period=scopedperiod)
        except:
            TrialBalance(TradingSymbol='MODEL', Period=scopedperiod).save()
except:
    pass

# For all Entity,
for TradingSymbol in TradingSymbols:
    #
    # entity
    try:
        print(137*'-')
        print('\n' * 3)
        #
        try:
            e = Entity.objects.get(TradingSymbol=TradingSymbol)
            #
            print(e.EntityRegistrantName + ' (' + e.TradingSymbol + ') retreived from Ï†.')
        except:
            e = Entity()
            e.TradingSymbol = TradingSymbol
            e.EntityCentralIndexKey = EntityCentralIndexKeys[TradingSymbol]
            e.save()
            #
            print('New Entity for TradingSymbol ' + TradingSymbol + ' created in Ï†.')
            #
            print(137*'-')
            print('\n' * 3)
    except:
        pass
    #
    # data gathering
    for scopedperiod in scopedperiods:
        #
        #
        # models, filings, entity information, documents, etc.
        try:
            # dictionaries
            try:
                IncomeStatement = {}
                ComprehensiveIncome = {}
                BalanceSheet = {}
                StockholdersEquity = {}
                CashFlowStatement = {}
            except:
                pass
            #
            # period
            try:
                print(scopedperiod)
                print(137*'-')
            except:
                print('---Could not print name, symbol or period.')
            #
            # trial balance
            try:
                # Deletes Trial Balance
                try:
                    tb = TrialBalance.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    print('Trial Balance from ' + tb.Period + ' deleted from the Ï†.')
                    tb.delete()
                except:
                    pass
                # Creates Trial Balance
                try:
                    tb = TrialBalance(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    tb.save()
                    print('Trial Balance for ' + scopedperiod + ' created.')
                except:
                    pass
            except:
                pass
            #
            # cash flow
            try:
                # Deletes Cash Flow Statements
                try:
                    cf = CashFlow.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    print('Cash Flow from ' + cf.Period + ' deleted from the Ï†.')
                    cf.delete()
                except:
                    pass
                # Creates ARCH Cash Flow Statements
                try:
                    cf = CashFlow(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    cf.save()
                    print('Cash Flow for ' + scopedperiod + ' created.')
                except:
                    pass
            except:
                pass
            #
            # audit
            try:
                # Deletes Audit
                try:
                    a = AuditData.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    print('Audit from ' + cf.Period + ' deleted from the Ï†.')
                    a.delete()
                except:
                    pass
                # Creates Audit
                try:
                    a = AuditData(TradingSymbol=TradingSymbol, Period=scopedperiod)
                    a.save()
                    print('Audit for ' + scopedperiod + ' created.')
                except:
                    pass
            except:
                pass
            #
            # last filings
            try:
                filings_list_base_url = r"https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK="
                EntityCentralIndexKey = EntityCentralIndexKeys[TradingSymbol]
                print(137*'-')
                print('CIK: ' + str(EntityCentralIndexKey))
                if scopedperiod in Quarters:
                    report = '10-Q'
                    if scopedperiod == 'lastquarter':
                        periodurl = ''
                else:
                    report = '10-K'
                    if scopedperiod == 'lastyear':
                        periodurl = ''
                print('Report type:' + report)
                try:
                    prior = periodurl
                    filings_list_base_url = filings_list_base_url + EntityCentralIndexKey + '&type=' + report + '&dateb='
                    filings_url = filings_list_base_url + prior + '&owner=exclude&count=40&search_text='
                    print(filings_url)
                except:
                    filings_url = filings_list_base_url + '&owner=exclude&count=40&search_text='
                    print(filings_url)
                filings_list_html = fetch(filings_url)
                #
                e.save()
            except:
                pass
            #
            # accession number - (to be updated re amend)
            try:
                i = 0
                accessionnumber = filings_list_html.find_all('td', class_='small')[i].text
                #
                # Accession Number Replacements
                rep1 = 'Transition reports [Rule 13a-10 or 15d-10]Acc-no: '
                rep2 = 'Annual report [Section 13 and 15(d), not S-K Item 405]Acc-no: '
                rep3 = 'Quarterly report [Sections 13 or 15(d)]Acc-no: '
                #
                while accessionnumber == '[Amend]':
                    i = i + 1
                    accessionnumber = filings_list_html.find_all('td', class_='small')[i].text
                    print(accessionnumber)
                #
                accessionnumber = accessionnumber.replace(rep1,'').replace(rep2,'').replace(rep3,'')[:20]
                #
                print('Accession number ' + accessionnumber)
                print(137*'-')
            except:
                print("---Could not retreive accession number.")
            #
            # entity information
            try:
                company_info_div = filings_list_html.find_all('div', class_='companyInfo')[0]
                #
                e.EntityRegistrantName = company_info_div.find_all('span', class_='companyName')[0].text.split(' CIK')[0].upper()
                print(e.EntityRegistrantName)
                #
                e.Industry = Industries[company_info_div.find_all('a')[1].text]
                print(e.Industry)
                #
                e.Region = Regions[company_info_div.find_all('a')[2].text]
                print(e.Region)
                #
                e.EntityIncorporationStateCountryCode = Regions[company_info_div.find_all('strong')[0].text]
                print(e.EntityIncorporationStateCountryCode)
                #
                print(137*'-')
            except:
                pass
            #
            # documents
            try:
                #
                # Retreives documents URL 
                try:
                    filing_documents_base_url = r"https://www.sec.gov/Archives/edgar/data/"
                    filing_documents_url = filing_documents_base_url + EntityCentralIndexKey + '/' + accessionnumber.replace('-','') + '/' + accessionnumber + '-index.htm'
                    tb.Link = filing_documents_url
                except:
                    print('---Could not retreive document`s url.')
                #
                # Retreives html code from filing documents url
                try:
                    filing_documents_html = fetch(filing_documents_url)
                except:
                    print('---Could not retreive filing html.')
                #
                # Retreive filing period of report
                try:
                    period = filing_documents_html.find_all('div', class_="info")[3].text
                    periodurl = period.replace('-','')
                    if scopedperiod == 'lastquarter':
                        periodlastquarter = period
                        print('Last Quarter: ' + period)
                    elif scopedperiod == 'lastyear':
                        periodlastyear = period
                        print('Last Year: ' + period)
                    else:
                        pass
                    print('DOCS URL: ' + filing_documents_url)
                #
                except:
                    print('---Could not retreive filing report date.')
                #
                # saves period of report
                try:
                    tb.PeriodOfReport = period
                    print('Period Of Report: ' + tb.PeriodOfReport)
                    tb.FilingDate = filing_documents_html.find_all('div', class_="info")[0].text
                    print('Filing Date: ' + tb.FilingDate)
                except:
                    print('---Could not establish Period Of Report And / Or Filing Date')
                #
                # Retreive filing documents tables
                try:
                    XBRL_taxonomy = filing_documents_html.find_all('table', class_="tableFile")[1].findAll('a')
                except:
                    print('---Could not retreive filing documents tables')
                #
                # Creates xml base url for calculation, definition and label 
                try:
                    xml_base_url = filing_documents_base_url + EntityCentralIndexKey + '/' + accessionnumber.replace('-','') + '/'
                except:
                    print('---Could not define xml_base_url')
                #
                # Defines downloads directory
                try:
                    downloads_directory = './Ï†/algorithm/downloads/'
                except:
                    print('---Could not define downloads directory.')
                #
                # Retreives filing document
                try:
                    filing_document = filing_documents_html.find_all('td')[2].text
                    filing_document = filing_document.split(' ')[0]
                    print('Filing document: ' + filing_document)
                    filing_url = xml_base_url + filing_document
                    print('Filing url: ' + filing_url)
                    r = requests.get(filing_url)
                    with open(downloads_directory + '/' + filing_document, 'wb') as f:
                        f.write(r.content)
                        print('Filing saved.')
                except:
                    print("---Could not retreive filing document")
                #
                # Retreives calculation document
                try:
                    calculation_document = XBRL_taxonomy[1].text
                    print('Calculation document: ' + calculation_document)
                    xml_cal = xml_base_url + calculation_document
                    print('xml calculation url: ' + xml_cal)
                    r = requests.get(xml_cal)
                    with open(downloads_directory + '/' + calculation_document, 'wb') as f:
                        f.write(r.content)
                        print('xml_cal saved.')
                except:
                    print('---Could not retreive calculation linkbase document')
                #
                # Retreives definition document
                try:
                    definition_document = XBRL_taxonomy[2].text
                    print('Definition document: ' + definition_document)
                    xml_def = xml_base_url + definition_document
                    print('xml definition url: ' + xml_def)
                    r = requests.get(xml_def)
                    with open(downloads_directory + '/' + definition_document, 'wb') as f:
                        f.write(r.content)
                        print('xml_def saved.')
                except:
                    print('---Could not retreive definition linkbase document')
                #
                # Retreives label document
                try:
                    label_document = XBRL_taxonomy[3].text
                    print('Label document: ' + label_document)
                    xml_lab = xml_base_url + label_document
                    print('xml label url: ' + xml_lab)
                    r = requests.get(xml_lab)
                    with open(downloads_directory + '/' + label_document, 'wb') as f:
                        f.write(r.content)
                        print('xml_lab saved.')
                except:
                    print('---Could not retreive label linkbase document')
                #
                # Define downloads directory for SEC files
                try:
                    SEC_directory = pathlib.Path.cwd().joinpath('./Ï†/algorithm/downloads')
                except:
                    print('---Could not define path to downloads.')
                #
                # Resolve path to files
                try:
                    file_htm = SEC_directory.joinpath(filing_document).resolve()
                    file_cal = SEC_directory.joinpath(calculation_document).resolve()
                    file_def = SEC_directory.joinpath(definition_document).resolve()
                    file_lab = SEC_directory.joinpath(label_document).resolve()
                except:
                    print('Could not resolve directory.')
                #
                # Define the different storage components
                try:
                    storage_list = []
                    storage_values = {}
                    storage_gaap = {}
                except:
                    print('---Could not define storage components')
                #
                # Creates tuple
                try:
                    FilingTuple = collections.namedtuple('FilingTuple',['file_path','namespace_element','namespace_label'])
                except:
                    print('---Could not create tuples')
                #
                # Initialize list of named tuples to be parsed
                try:
                    files_list = [
                        FilingTuple(file_cal, r'{http://www.xbrl.org/2003/linkbase}calculationLink', 'calculation'),
                        FilingTuple(file_def, r'{http://www.xbrl.org/2003/linkbase}definitionLink', 'definition'),
                        FilingTuple(file_lab, r'{http://www.xbrl.org/2003/linkbase}labelLink', 'label'),
                    ]
                except:
                    print('---Could not initialize list of named tuples to be parsed')
                #
                # Defines categories of labels to be excluded
                try:
                    avoids = ['linkbase','roleRef']
                    parse = ['label','labelLink','labelArc','loc','definitionLink','definitionArc','calculationArc']
                except:
                    print('---Could not define labels to be excluded')
                #
                # Creates empty sets
                try:
                    lab_list = set()
                    cal_list = set()
                except:
                    print('---Could not create empty sets.')
            except:
                pass
            #
            # Trees
            try:
                print(137*'-')
                f = open(file_htm, "r")
                content = f.read()                
                #
                # Method after 2018
                if content[:5] == '<?xml':
                    MethodAfter2018Applies = 'yes'
                    try:
                        # files
                        for file in files_list:
                            tree = ET.parse(file.file_path)
                            elements = tree.findall(file.namespace_element)
                            for element in elements:
                                for child_element in element.iter():
                                    element_split_label = child_element.tag.split('}')
                                    namespace = element_split_label[0]
                                    label = element_split_label[1]
                                    if label in parse:
                                        element_type_label = file.namespace_label + '_' + label
                                        dict_storage = {}
                                        dict_storage['item_type'] = element_type_label
                                        cal_keys = child_element.keys()
                                        for key in cal_keys:
                                            if '}' in key:
                                                new_key = key.split('}')[1]
                                                dict_storage[new_key] = child_element.attrib[key]
                                            else:
                                                dict_storage[key] = child_element.attrib[key]
                                        if element_type_label == 'label_label':
                                            key_store = dict_storage['label']
                                            master_key = key_store.replace('lab_', '')
                                            label_split = master_key.split('_')
                                            gaap_id = label_split[0] + ":" + label_split[1]
                                            storage_values[master_key] = {}
                                            storage_values[master_key]['label_id'] = key_store
                                            storage_values[master_key]['location_id'] = key_store.replace('lab_','loc_')
                                            storage_values[master_key]['us_gaap_id'] = gaap_id
                                            storage_values[master_key]['us_gaap_value'] = None
                                            storage_values[master_key][element_type_label] = dict_storage
                                            storage_gaap[gaap_id] = {}
                                            storage_gaap[gaap_id]['id'] = gaap_id
                                            storage_gaap[gaap_id]['master_id'] = master_key
                                        storage_list.append([file.namespace_label, dict_storage])
                        #
                        # Tree Data
                        try:
                            #
                            # Qualitative
                            try:
                                tree = ET.parse(file_htm)
                                for element in tree.iter():
                                    if 'nonNumeric' in element.tag:
                                        attr_name = element.attrib['name']
                                        gaap_id = storage_gaap[attr_name]['master_id']
                                        storage_gaap[attr_name]['context_ref'] = element.attrib['contextRef']
                                        SEC_context = storage_gaap[attr_name]['context_ref']
                                        storage_gaap[attr_name]['context_id'] = element.attrib['id']
                                        storage_gaap[attr_name]['continued_at'] = element.attrib.get('continued_at', 'null')
                                        storage_gaap[attr_name]['escape'] = element.attrib.get('escape', 'null')
                                        storage_gaap[attr_name]['format'] = element.attrib.get('format', 'null')
                                        storage_gaap[attr_name]['value'] = element.text.strip() if element.text else 'null'
                                        value = storage_gaap[attr_name]['value']
                                        SEC_component = str(attr_name.split(":")[1])
                                        if SEC_component == 'EntityRegistrantName':
                                            tb.EntityRegistrantName = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'AmendmentFlag':
                                            tb.AmendmentFlag = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'DocumentFiscalPeriodFocus':
                                            tb.DocumentFiscalPeriodFocus = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'DocumentFiscalYearFocus':
                                            tb.DocumentFiscalYearFocus = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'DocumentPeriodEndDate':
                                            tb.DocumentPeriodEndDate = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'EntityIncorporationStateCountryCode':
                                            tb.EntityIncorporationStateCountryCode = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'Region':
                                            tb.Region = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'CurrentFiscalYearEndDate':
                                            tb.CurrentFiscalYearEndDate = value
                                            print(SEC_component + ': ' + value)
                                        elif SEC_component == 'SecurityExchangeName':
                                            if tb.SecurityExchangeName is None:
                                                tb.SecurityExchangeName = value
                                                print(SEC_component + ': ' + value)
                                        else:
                                            pass
                                # Save
                                tb.save()
                                print(137 * '-')
                            #
                            except:
                                pass
                            #
                            # Quantitative
                            try:
                                tree = ET.parse(file_htm)
                                for element in tree.iter():
                                    if 'nonFraction' in element.tag:
                                        try:
                                            attr_name = element.attrib['name']
                                            gaap_id = storage_gaap[attr_name]['master_id']
                                            storage_values[gaap_id]['us_gaap_value'] = storage_gaap[attr_name]
                                            account = storage_values[gaap_id]['us_gaap_value']
                                            storage_gaap[attr_name]['context_ref'] = element.attrib['contextRef']
                                            storage_gaap[attr_name]['fraction_id'] = element.attrib['id']
                                            storage_gaap[attr_name]['unit_ref'] = element.attrib.get('unitRef', 'null')
                                            storage_gaap[attr_name]['decimals'] = element.attrib.get('decimals', 'null')
                                            storage_gaap[attr_name]['scale'] = element.attrib.get('scale', 'null')
                                            storage_gaap[attr_name]['sign'] = element.attrib.get('sign', 'null')
                                            storage_gaap[attr_name]['format'] = element.attrib.get('format', 'null')
                                            storage_gaap[attr_name]['value'] = element.text.strip() if element.text else 'null'
                                            source = str(attr_name.split(":")[1])
                                            if storage_gaap[attr_name]['sign'] == '-':
                                                sign = -1
                                            else:
                                                sign = 1
                                            #
                                            # Dad
                                            try:
                                                dad = 10**int(account.get('scale'))
                                            except:
                                                dad = 1
                                            #
                                            # Type
                                            try:
                                                SECvalue = int(float(account.get('value').replace(",","")) * dad * sign)
                                            except:
                                                pass
                                        except:
                                            pass
                            except:
                                print('Quantitative Data Parson From Downloaded Tree (Method After 2018 failed).')
                            #
                            # Save
                            tb.save()
                            print('Quantitative Data Parsing From Downloaded Tree (Method After 2018) Succeeded')
                        #
                        except:
                            print('---Tree For Method after 2018.')
                    #
                    except:
                        print('---Could not complete method after 2018.')
                #
                # Method After 2018
                else:
                    MethodAfter2018Applies = 'no'
                #
                # Documents general method
                try:
                    base_url = r"https://www.sec.gov"
                    index_url = xml_base_url + 'index.json'
                    content = requests.get(index_url).json()
                    for file in content['directory']['item']:
                        if file['name'] == 'FilingSummary.xml':
                            xml_summary = base_url + content['directory']['name'] + '/' + file['name']
                except:
                    print('---Could not define directory url.')
                try:
                    base_url = xml_summary.replace('FilingSummary.xml', '')
                    content = requests.get(xml_summary).content
                    soup = BeautifulSoup(content, 'lxml')
                    #
                    # list of reports in filing summary
                    reports = soup.find('myreports')
                    #
                    # Master list of reports
                    master_reports = []
                    for report in reports.find_all('report')[:-1]:
                        report_dict = {}
                        report_dict['name_short'] = report.shortname.text
                        report_dict['name_long'] = report.longname.text
                        report_dict['position'] = report.position.text
                        report_dict['category'] = report.menucategory.text
                        report_dict['url'] = base_url + report.htmlfilename.text
                        master_reports.append(report_dict)
                        #
                        print(report_dict['name_short'].upper())
                    print(137*'-')
                    #
                    # Statements urls
                    statements_url = []
                    statements_set = {}
                    for report_dict in master_reports:
                        if report_dict['name_short'].upper() in SEC_Report:
                            financial_url = report_dict['url']
                            financial_set = report_dict['name_short'],
                            append_value(statements_set, financial_set,  financial_url)
                            statements_url.append(financial_url)
                    #
                    pprint.pprint(statements_set)
                    #
                    # Statements data
                    i = 0
                    statements_data = []
                    #
                    for financial_set in statements_set:
                        #
                        financial_statement = financial_set[0].upper()
                        statement = statements_set[financial_set]
                        #
                        print(137*'-')
                        print(statement)
                        print(137*'-')
                        #
                        statement_data = {}
                        statement_data['headers'] = []
                        statement_data['sections'] = []
                        statement_data['data'] = []
                        content = requests.get(statement).content
                        report_soup = BeautifulSoup(content, 'html')
                        #
                        for index, row in enumerate(report_soup.table.find_all('tr')):
                            try:
                                cols = row.find_all('td')
                                #
                                if (len(row.find_all('th')) == 0 and len(row.find_all('strong')) == 0):
                                    reg_row = [ele.text.strip() for ele in cols]
                                    #
                                    # GL
                                    GL_SEC = reg_row[0]
                                    #
                                    # value
                                    value = reg_row[1]
                                    #
                                    if financial_statement in ARCH_StockholdersEquity:
                                        #
                                        value = 0
                                        i = 2
                                        #
                                        while i <= (len(reg_row) - 1):
                                            try:
                                                #
                                                column_value = reg_row[i].replace('$','').replace(' ','').replace(',','').replace('(','-').replace(')','')
                                                #
                                                if column_value == '':
                                                    column_value = 0
                                                #
                                                if type(column_value) == str:
                                                    column_value = float(column_value)
                                                #
                                                value = value + column_value
                                            except:
                                                print('---Failed to establish stockholders equity value')
                                            #
                                            i = i + 1
                                    #
                                    # ARCH_GL
                                    ARCH_GL = [
                                        financial_statement,
                                        GL_SEC,
                                        value,
                                    ]
                                    #
                                    # append
                                    statement_data['data'].append(ARCH_GL)
                                    #
                                    print(ARCH_GL)
                                #
                                elif (len(row.find_all('th')) == 0 and len(row.find_all('strong')) != 0):
                                    sec_row = cols[0].text.strip()
                                    statement_data['sections'].append(sec_row)
                                #
                                elif len(row.find_all('th')) != 0:
                                    hed_row = [ele.text.strip() for ele in row.find_all('th')]
                                    statement_data['headers'].append(hed_row)
                                #
                                else:
                                    print('---Could not distinguish headers from section and regular rows.')
                            #
                            except:
                                print('---Could not append ARCH_GL')
                        #
                        statements_data.append(statement_data)
                        #
                        i = i + 1
                    #
                    print(137*'-')
                    #
                    # Define documents period end date
                    if MethodAfter2018Applies == 'no':
                        print('Document Period End Date')
                        try:
                            DPED = statements_data[0]['headers'][1][0].replace('Jan.', 'January').replace('Feb.', 'February').replace('Mar.', 'March')
                            DPED = DPED.replace('Apr.', 'April').replace('Jun.', 'June').replace('Jul.', 'July').replace('Aug.', 'August')
                            DPED = DPED.replace('Sep.', 'September').replace('Oct.', 'October').replace('Nov.', 'November').replace('Dec.', 'December')
                            #
                            tb.DocumentPeriodEndDate = DPED
                        except:
                            print('---Could not establish document period end date.')
                    try:
                        print('Document period End Date: ' + str(tb.DocumentPeriodEndDate))
                    except:
                        print('---Could not establish period end date')
                    #
                    # Define entity period end date
                    try:
                        if scopedperiod == 'lastquarter':
                            e.lastquarter =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'secondlastquarter':
                            e.secondlastquarter =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'thirdlastquarter':
                            e.thirdlastquarter =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'fourthlastquarter':
                            e.fourthlastquarter =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'lastyear':
                            e.lastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'secondlastyear':
                            e.secondlastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'thirdlastyear':
                            e.thirdlastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'fourthlastyear':
                            e.fourthlastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'fifthlastyear':
                            e.fifthlastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'sixthlastyear':
                            e.sixthlastyear =  tb.DocumentPeriodEndDate
                        elif scopedperiod == 'seventhlastyear':
                            e.seventhlastyear =  tb.DocumentPeriodEndDate
                        else:
                            pass
                        print(137*'-')
                    except:
                        print('---Could Not Define Entity`s Period End Dates')
                    #
                    # dad
                    try:
                        #
                        print('scale')
                        #
                        print(statement_data['headers'][0][0])
                        #
                        if statement_data['headers'][0][0][-11:].upper() == 'IN MILLIONS':
                            dad = 1000000
                        #
                        elif statement_data['headers'][0][0][-12:].upper() == 'IN THOUSANDS':
                            dad = 1000
                        #
                        else:
                            dad = 1
                        #
                        print(dad)
                    except:
                        print('---Could not establish scale.')
                    #
                    print(137*'-')
                    print('\n' *3)
                    #
                    # financial statement sec to arch dictionaries
                    print('arch GLs')
                    print(137*'-')
                    print('\n' *3)
                    #
                    i = 0
                    while len(statements_data) > i:
                        j = 0
                        while len(statements_data[i]['data']) > j:
                            try:
                                financial_statement = statements_data[i]['data'][j][0].upper()
                                #
                                print(financial_statement)
                                #
                                GL = statements_data[i]['data'][j][1]
                                #
                                GL = GL.title()
                                #
                                # remove (note) from label
                                try:
                                    try:
                                        GL = GL.split('(Note')[0]
                                    except:
                                        pass
                                    try:
                                        GL = GL.split('(note')[0]
                                    except:
                                        pass
                                except:
                                    pass
                                #
                                # regular expressions
                                GL = re.sub(r"[^a-zA-Z0-9]", "", GL)
                                #
                                # remove spaces
                                GL = GL.replace(' ','')
                                #
                                print(GL)
                                #
                                try:
                                    value = statements_data[i]['data'][j][2]
                                    #
                                    value = value.replace(',','')
                                    value = value.replace(' ','')
                                    value = value.replace('$','')
                                    try:
                                        value = value.replace('(','-')
                                        value = value.replace(')','')
                                    except:
                                        pass
                                except:
                                    pass
                                #
                                value = float(value)
                                #
                                value = int(value * dad)
                                #
                                print(value)
                                #
                                if financial_statement in ARCH_IncomeStatement:
                                    append_value(IncomeStatement, GL, value)
                                    IncomeStatement_GLs.append(GL)
                                    print('appended to income statement \n')
                                #
                                elif financial_statement in ARCH_ComprehensiveIncome:
                                    append_value(ComprehensiveIncome, GL, value)
                                    ComprehensiveIncome_GLs.append(GL)
                                    print('appended to comprehensive income \n')
                                #
                                elif financial_statement in ARCH_BalanceSheet:
                                    append_value(BalanceSheet, GL, value)
                                    BalanceSheet_GLs.append(GL)
                                    print('appended to balance sheet \n')
                                #
                                elif financial_statement in ARCH_StockholdersEquity:
                                    append_value(StockholdersEquity, GL, value)
                                    StockholdersEquity_GLs.append(GL)
                                    print('appended to stockholders equity \n')
                                #
                                elif financial_statement in ARCH_CashFlowStatement:
                                    append_value(CashFlowStatement, GL, value)
                                    CashFlow_GLs.append(GL)
                                    print('appended to cash flow \n')
                                #
                                else:
                                    pass
                            except:
                                print('---Could not process ' + GL + ' from ' + financial_statement)
                            j = j + 1
                        i = i + 1
                except:
                    print('---Could not complete general sequence')
            except:
                print('---Retreiving Tree Failed')
            #
            # print data retreived sec
            try:
                #  
                print(137*'-')
                #
                print('Income Statement')
                pprint.pprint(IncomeStatement)
                #
                print(137*'-')
                #
                print('Comprehensive Income')
                pprint.pprint(ComprehensiveIncome)
                #
                print(137*'-')
                #
                print('Balance Sheet')
                pprint.pprint(BalanceSheet)
                #
                print(137*'-')
                #
                print('Stockholders Equity')
                pprint.pprint(StockholdersEquity)
                #
                print(137*'-')
                #
                print('Cash Flow Statement')
                pprint.pprint(CashFlowStatement)
                #
                print(137*'-')
                #
            except:
                pass
        except:
            pass
        #
        # financial statements
        try:
            print('\n' * 3)
            #
            # balance sheet
            print('balance sheet')
            print(137*'-')
            print('\n' * 3)
            #
            #
            # current assets
            try:
                #
                print('current assets')
                print(137*'-')
                #
                CurrentAssetsDict = []
                #
                # cash
                try:
                    Cash = []
                    for key,value in BalanceSheet.items():
                        if key == 'CashAndCashEquivalentsAtCarryingValue':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash And Cash Equivalents At Carrying Value: ' + str(ARCHvalue))
                            Cash.append(ARCHvalue)
                        elif key == 'CashAndCashEquivalents':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash And Cash Equivalents: ' + str(ARCHvalue))
                            Cash.append(ARCHvalue)
                        else:
                            pass
                    tb.Cash = sum(Cash)
                except:
                    pass
                #
                # short term investment
                try:
                    ShortTermInvestments = []
                    for key,value in BalanceSheet.items():
                        if key == 'MarketableSecuritiesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Securities Current: ' + str(ARCHvalue))
                            ShortTermInvestments.append(ARCHvalue)
                        elif key == 'MarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Marketable Securities: ' + str(ARCHvalue))
                            ShortTermInvestments.append(ARCHvalue)
                        elif key == 'ShortTermMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Short Term Marketable Securities: ' + str(ARCHvalue))
                            ShortTermInvestments.append(ARCHvalue)
                        elif key == 'AvailableForSaleSecuritiesDebtSecuritiesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Available For Sale Securities Debt Securities Current: ' + str(ARCHvalue))
                            ShortTermInvestments.append(ARCHvalue)
                        elif key == 'ShortTermInvestments':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Short Term Investments: ' + str(ARCHvalue))
                            ShortTermInvestments.append(ARCHvalue)
                        else:
                            pass
                    tb.ShortTermInvestments = sum(ShortTermInvestments)
                except:
                    pass
                #
                # account receivable
                try:
                    AccountsReceivable = []
                    for key,value in BalanceSheet.items():
                        if key == 'AccountsReceivableNetCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Receivable Net Current: ' + str(ARCHvalue))
                            AccountsReceivable.append(ARCHvalue)
                        elif key == 'AccountsReceivableNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Receivable Net: ' + str(ARCHvalue))
                            AccountsReceivable.append(ARCHvalue)
                        elif key == 'ReceivablesNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Receivables Net: ' + str(ARCHvalue))
                            AccountsReceivable.append(ARCHvalue)
                        elif key == 'AccountsReceivableLessAllowancesOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Receivable Less Allowances: ' + str(ARCHvalue))
                            AccountsReceivable.append(ARCHvalue)
                        elif key == 'AccountsReceivableNetOfAllowancesOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Receivable Net Of Allowances Of: ' + str(ARCHvalue))
                            AccountsReceivable.append(ARCHvalue)
                        else:
                            pass
                    tb.AccountsReceivable = sum(AccountsReceivable)
                except:
                    pass
                #
                # inventories
                try:
                    Inventories = []
                    for key,value in BalanceSheet.items():
                        if key == 'InventoryNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Inventory Net: ' + str(ARCHvalue))
                            Inventories.append(ARCHvalue)
                        elif key == 'Inventories':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Inventories: ' + str(ARCHvalue))
                            Inventories.append(ARCHvalue)
                        else:
                            pass
                    tb.Inventories = sum(Inventories)
                except:
                    pass
                #
                # prepaid expenses
                try:
                    PrepaidExpenses = []
                    for key,value in BalanceSheet.items():
                        if key == 'PrepaidExpenseAndOtherAssetsCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Prepaid Expense And Other Assets Current: ' + str(ARCHvalue))
                            PrepaidExpenses.append(ARCHvalue)
                    for key,value in BalanceSheet.items():
                        if key == 'PrepaidExpensesAndOther':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Prepaid Expenses And Other: ' + str(ARCHvalue))
                            PrepaidExpenses.append(ARCHvalue)
                        else:
                            pass
                    tb.PrepaidExpenses = sum(PrepaidExpenses)
                except:
                    pass
                #
                # non-trade receivables
                try:
                    NonTradeReceivables = []
                    for key,value in BalanceSheet.items():
                        if key == 'NontradeReceivablesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Non trade Receivables Current: ' + str(ARCHvalue))
                            NonTradeReceivables.append(ARCHvalue)
                        elif key == 'VendorNonTradeReceivables':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Vendor Non Trade Receivables: ' + str(ARCHvalue))
                            NonTradeReceivables.append(ARCHvalue)
                        elif key == 'OtherReceivables':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Receivables: ' + str(ARCHvalue))
                            NonTradeReceivables.append(ARCHvalue)
                        else:
                            pass
                    tb.NonTradeReceivables = sum(NonTradeReceivables)
                except:
                    pass
                #
                # deferred tax assets
                try:
                    DeferredTaxAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'DeferredTaxAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Tax Assets: ' + str(ARCHvalue))
                            DeferredTaxAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredTaxAssets = sum(DeferredTaxAssets)
                except:
                    pass
                #
                # other current assets
                try:
                    OtherCurrentAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'OtherAssetsCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Assets Current: ' + str(ARCHvalue))
                            OtherCurrentAssets.append(ARCHvalue)
                        elif key == 'OtherCurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Current Assets: ' + str(ARCHvalue))
                            OtherCurrentAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.OtherCurrentAssets = sum(OtherCurrentAssets)
                except:
                    pass
                #
                # discontinued operations current
                try:
                    DiscontinuedOperationsCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'CurrentAssetsOfDiscontinuedOperations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Current assets of discontinued operations: ' + str(ARCHvalue))
                            DiscontinuedOperationsCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.DiscontinuedOperationsCurrent = sum(DiscontinuedOperationsCurrent)
                except:
                    pass
                #
                # total current assets
                try:
                    TotalCurrentAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'AssetsCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Assets Current: ' + str(ARCHvalue))
                            TotalCurrentAssets.append(ARCHvalue)
                        elif key == 'TotalCurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Current Assets: ' + str(ARCHvalue))
                            TotalCurrentAssets.append(ARCHvalue)
                        else:
                            pass
                    a.CurrentAssets = sum(TotalCurrentAssets)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            # non-current assets
            try:
                #
                print('non-current assets')
                print(137*'-')
                #
                NonCurrentAssetsDict = []
                #
                # investments
                try:
                    Investments = []
                    for key,value in BalanceSheet.items():
                        if key == 'MarketableSecuritiesNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Marketable Securities Non current: ' + str(ARCHvalue))
                            Investments.append(ARCHvalue)
                        elif key == 'LongTermMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Marketable Securities: ' + str(ARCHvalue))
                            Investments.append(ARCHvalue)
                        elif key == 'MarketableSecurities':
                            try:
                                ARCHvalue = value[1]
                            except:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            print('Marketable Securities: ' + str(ARCHvalue))
                            Investments.append(ARCHvalue)
                        elif key == 'Investments':
                            try:
                                ARCHvalue = value[1]
                            except:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            print('Investment: ' + str(ARCHvalue))
                            Investments.append(ARCHvalue)
                        else:
                            pass
                    tb.Investments = sum(Investments)
                except:
                    pass
                #
                # property plant and equipments
                try:
                    PropertyPlantAndEquipment = []
                    for key,value in BalanceSheet.items():
                        if key == 'PropertyPlantAndEquipmentNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Property Plant And Equipment Net: ' + str(ARCHvalue))
                            PropertyPlantAndEquipment.append(ARCHvalue)
                        if key == 'PropertyAndEquipmentNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Property And Equipment Net: ' + str(ARCHvalue))
                            PropertyPlantAndEquipment.append(ARCHvalue)
                        elif key == 'PropertyPlantAndEquipmentAndFinanceLeaseRightofUseAssetAfterAccumulatedDepreciationAndAmortization':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Property Plant And Equipment And Finance Lease Right of Use Asset After Accumulated Depreciation And Amortization: ' + str(ARCHvalue))
                            PropertyPlantAndEquipment.append(ARCHvalue)
                        elif key == 'PropertyAndEquipmentNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Property And Equipment Net: ' + str(ARCHvalue))
                            PropertyPlantAndEquipment.append(ARCHvalue)
                        else:
                            pass
                    tb.PropertyPlantAndEquipment = sum(PropertyPlantAndEquipment)
                except:
                    pass
                #
                # operating lease right of use assets
                try:
                    OperatingLeaseRightOfUseAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'OperatingLeaseRightOfUseAsset':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Right Of Use Asset: ' + str(ARCHvalue))
                            OperatingLeaseRightOfUseAssets.append(ARCHvalue)
                        elif key == 'OperatingLeaseRightOfUseAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Right Of Use Assets: ' + str(ARCHvalue))
                            OperatingLeaseRightOfUseAssets.append(ARCHvalue)
                        elif key == 'OperatingLeaseAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Assets: ' + str(ARCHvalue))
                            OperatingLeaseRightOfUseAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.OperatingLeaseRightOfUseAssets = sum(OperatingLeaseRightOfUseAssets)
                except:
                    pass
                #
                # finance lease right of use assets
                try:
                    FinanceLeaseRightOfUseAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'FinanceLeaseRightOfUseAssetsNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Right Of Use Assets, Net: ' + str(ARCHvalue))
                            FinanceLeaseRightOfUseAssets.append(ARCHvalue)
                        if key == 'FinanceLeaseRightOfUseAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Right Of Use Assets: ' + str(ARCHvalue))
                            FinanceLeaseRightOfUseAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.FinanceLeaseRightOfUseAssets = sum(FinanceLeaseRightOfUseAssets)
                except:
                    pass
                #
                # property under capital lease and financing obligations
                try:
                    PropertyUnderCapitalLeaseAndFinancingObligations = []
                    for key,value in BalanceSheet.items():
                        if key == 'PropertyUnderCapitalLeaseAndFinancingObligationsNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Property Under Capital Lease And Financing Obligations, Net: ' + str(ARCHvalue))
                            PropertyUnderCapitalLeaseAndFinancingObligations.append(ARCHvalue)
                        else:
                            pass
                    tb.PropertyUnderCapitalLeaseAndFinancingObligations = sum(PropertyUnderCapitalLeaseAndFinancingObligations)
                except:
                    pass
                #
                # intangible assets
                try:
                    IntangibleAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'IntangibleAssetsNetExcludingGoodwill':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Intangible Assets Net Excluding Goodwill: ' + str(ARCHvalue))
                            IntangibleAssets.append(ARCHvalue)
                        elif key == 'AcquiredIntangibleAssetsNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Acquired Intangible Assets, Net: ' + str(ARCHvalue))
                            IntangibleAssets.append(ARCHvalue)
                        elif key == 'OtherIntangiblesNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other intangibles, net: ' + str(ARCHvalue))
                            IntangibleAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.IntangibleAssets = sum(IntangibleAssets)
                except:
                    pass
                #
                # goodwill
                try:
                    Goodwill = []
                    for key,value in BalanceSheet.items():
                        if key == 'Goodwill':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Goodwill: ' + str(ARCHvalue))
                            Goodwill.append(ARCHvalue)
                        else:
                            pass
                    tb.Goodwill = sum(Goodwill)
                except:
                    pass
                #
                # deferred tax assets non current
                try:
                    DeferredTaxAssetsNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'DeferredTaxAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Tax Assets: ' + str(ARCHvalue))
                            DeferredTaxAssetsNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredTaxAssetsNonCurrent = sum(DeferredTaxAssetsNonCurrent)
                except:
                    pass
                #
                # other non-current assets
                try:
                    OtherNonCurrentAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'OtherAssetsNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Assets Non current: ' + str(ARCHvalue))
                            OtherNonCurrentAssets.append(ARCHvalue)
                        elif key == 'OtherNonCurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Non Current Assets: ' + str(ARCHvalue))
                            OtherNonCurrentAssets.append(ARCHvalue)
                        elif key == 'OtherLongTermAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Long Term Assets: ' + str(ARCHvalue))
                            OtherNonCurrentAssets.append(ARCHvalue)
                        elif key == 'OtherNoncurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Noncurrent Assets: ' + str(ARCHvalue))
                            OtherNonCurrentAssets.append(ARCHvalue)
                        else:
                            pass
                    tb.OtherNonCurrentAssets = sum(OtherNonCurrentAssets)
                except:
                    pass
                #
                # total non current assets
                try:
                    TotalNonCurrentAssets = []
                    for key,value in BalanceSheet.items():
                        if key == 'AssetsNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Assets Non current: ' + str(ARCHvalue))
                            TotalNonCurrentAssets.append(ARCHvalue)
                        elif key == 'TotalNonCurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Non Current Assets: ' + str(ARCHvalue))
                            TotalNonCurrentAssets.append(ARCHvalue)
                        else:
                            pass
                    a.NonCurrentAssets = sum(TotalNonCurrentAssets)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            # total assets
            try:
                TotalAssets = []
                for key,value in BalanceSheet.items():
                    if key == 'Assets':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            ARCHvalue = value
                            BalanceSheet[key] = None
                        print('Assets: ' + str(ARCHvalue))
                        TotalAssets.append(ARCHvalue)
                    elif key == 'TotalAssets':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            ARCHvalue = value
                            BalanceSheet[key] = None
                        print(137*'-')
                        print('Total Assets: ' + str(ARCHvalue))
                        TotalAssets.append(ARCHvalue)
                    else:
                        pass
                a.Assets = sum(TotalAssets)
                #
                # total asset not null
                try:
                    if a.NonCurrentAssets == 0:
                        a.NonCurrentAssets = a.Assets - a.CurrentAssets
                except:
                    pass
                #
                print(137*'-')
                print('\n' * 3)
            except:
                pass
            #
            # current liabilities
            try:
                print('current liabilities')
                print(137*'-')
                #
                CurrentLiabilitiesDict = []
                #
                # accounts payable and accrued liabilities
                try:
                    AccountsPayableAndAccruedLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'AccountsPayableCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Payable Current: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        elif key == 'AccountsPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Payable: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        elif key == 'AccruedExpenses':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Current Liabilities Accrued Expenses: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        elif key == 'AccruedLiabilitiesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accrued Liabilities Current: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        elif key == 'AccruedLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accrued Liabilities: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        elif key == 'SalesRebatesAndDiscounts':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Sales Rebates And Discounts: ' + str(ARCHvalue))
                            AccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        else:
                            pass
                    tb.AccountsPayableAndAccruedLiabilities = -sum(AccountsPayableAndAccruedLiabilities)
                except:
                    pass
                #
                # employee compensation current
                try:
                    EmployeeCompensationCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'EmployeeCompensation':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Employee Compensation: ' + str(ARCHvalue))
                            EmployeeCompensationCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.EmployeeCompensationCurrent = -sum(EmployeeCompensationCurrent)
                except:
                    pass
                #
                # operating leases current
                try:
                    OperatingLeasesCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'OperatingLeaseLiabilityCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Liability Current: ' + str(ARCHvalue))
                            OperatingLeasesCurrent.append(ARCHvalue)
                        if key == 'OperatingLeaseObligationsDueWithinOneYear':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Obligations Due Within One Year: ' + str(ARCHvalue))
                            OperatingLeasesCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.OperatingLeasesCurrent = -sum(OperatingLeasesCurrent)
                except:
                    pass
                #
                # finance leases current
                try:
                    FinanceLeasesCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'FinanceLeaseObligationsDueWithinOneYear':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Finance Lease Obligations Due Within One Year: ' + str(ARCHvalue))
                            FinanceLeasesCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.FinanceLeasesCurrent = -sum(FinanceLeasesCurrent)
                except:
                    pass
                #
                # capital lease and financing obligations current
                try:
                    CapitalLeaseAndFinancingObligationsCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'CapitalLeaseAndFinancingObligationsDueWithinOneYear':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Capital Lease And Financing Obligations Due Within One Year: ' + str(ARCHvalue))
                            CapitalLeaseAndFinancingObligationsCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.CapitalLeaseAndFinancingObligationsCurrent = -sum(CapitalLeaseAndFinancingObligationsCurrent)
                except:
                    pass
                #
                # deferred revenue and deposits current
                try:
                    DeferredRevenueAndDepositsCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'ContractWithCustomerLiabilityCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Contract With Customer Liability Current: ' + str(ARCHvalue))
                            DeferredRevenueAndDepositsCurrent.append(ARCHvalue)
                        elif key == 'DeferredRevenue':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Revenue: ' + str(ARCHvalue))
                            DeferredRevenueAndDepositsCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredRevenueAndDepositsCurrent = -sum(DeferredRevenueAndDepositsCurrent)
                except:
                    pass
                #
                # accrued tax liabilities
                try:
                    AccruedTaxLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'AccruedIncomeTaxes':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accrued Income Taxes: ' + str(ARCHvalue))
                            AccruedTaxLiabilities.append(ARCHvalue)
                        if key == 'IncomeTaxesPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Income Taxes Payable: ' + str(ARCHvalue))
                            AccruedTaxLiabilities.append(ARCHvalue)
                        else:
                            pass
                    tb.AccruedTaxLiabilities = -sum(AccruedTaxLiabilities)
                except:
                    pass
                #
                # deferred tax liabilities
                try:
                    DeferredTaxLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'DeferredIncomeTaxes':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Taxes: ' + str(ARCHvalue))
                            DeferredTaxLiabilities.append(ARCHvalue)
                        if key == 'DeferredTaxLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Tax Liabilities: ' + str(ARCHvalue))
                            DeferredTaxLiabilities.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredTaxLiabilities = -sum(DeferredTaxLiabilities)
                except:
                    pass
                #
                # commercial papers
                try:
                    CommercialPapers = []
                    for key,value in BalanceSheet.items():
                        if key == 'CommercialPaper':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Commercial Paper: ' + str(ARCHvalue))
                            CommercialPapers.append(ARCHvalue)
                        if key == 'CommercialPaperAndRepurchaseAgreements':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Commercial Paper And Repurchase Agreements: ' + str(ARCHvalue))
                            CommercialPapers.append(ARCHvalue)
                    tb.CommercialPapers = -sum(CommercialPapers)
                except:
                    pass
                #
                # other short term borrowings
                try:
                    OtherShortTermBorrowings = []
                    for key,value in BalanceSheet.items():
                        if key == 'OtherLiabilitiesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Liabilities Current: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        elif key == 'OtherCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Current Liabilities: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        elif key == 'AccountsPayableTradeCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Payable Trade Current: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        elif key == 'ShortTermBorrowings':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Short Term Borrowings: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        elif key == 'ShortTermBorrowingsAndCurrentMaturitiesOfLongTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Short Term Borrowings And Current Maturities Of Long Term Debt: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        elif key == 'OtherCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Current Liabilities: ' + str(ARCHvalue))
                            OtherShortTermBorrowings.append(ARCHvalue)
                        else:
                            pass
                    tb.OtherShortTermBorrowings = -sum(OtherShortTermBorrowings)
                except:
                    pass
                #
                # discontinued operations
                try:
                    DiscontinuedOperations = []
                    for key,value in BalanceSheet.items():
                        if key == 'CurrentLiabilitiesOfDiscontinuedOperations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Current Liabilities Of Discontinued Operations: ' + str(ARCHvalue))
                            DiscontinuedOperations.append(ARCHvalue)
                        else:
                            pass
                    tb.DiscontinuedOperations = -sum(DiscontinuedOperations)
                except:
                    pass
                #
                # dividend payable
                try:
                    DividendsPayable = []
                    for key,value in BalanceSheet.items():
                        if key == 'DividendsPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Dividends Payable: ' + str(ARCHvalue))
                            DividendsPayable.append(ARCHvalue)
                        else:
                            pass
                    tb.DividendsPayable = -sum(DividendsPayable)
                except:
                    pass
                #
                # short term portion of long term debt
                try:
                    ShortTermPortionOfLongTermDebt = []
                    for key,value in BalanceSheet.items():
                        if key == 'LongTermDebtCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Debt Current: ' + str(ARCHvalue))
                            ShortTermPortionOfLongTermDebt.append(ARCHvalue)
                        elif key == 'CurrentPortionOfLongTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Current Portion Of Long Term Debt: ' + str(ARCHvalue))
                            ShortTermPortionOfLongTermDebt.append(value)
                        if key == 'TermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Term Debt: ' + str(ARCHvalue))
                            ShortTermPortionOfLongTermDebt.append(ARCHvalue)
                        if key == 'LongTermDebtDueWithinOneYear':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Debt Due Within One Year: ' + str(ARCHvalue))
                            ShortTermPortionOfLongTermDebt.append(ARCHvalue)
                        else:
                            pass
                    tb.ShortTermPortionOfLongTermDebt = -sum(ShortTermPortionOfLongTermDebt)
                except:
                    pass
                #
                # total current liabilities
                try:
                    TotalCurrentLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'LiabilitiesCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Liabilities Current: ' + str(ARCHvalue))
                            TotalCurrentLiabilities.append(ARCHvalue)
                        elif key == 'TotalCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Current Liabilities: ' + str(ARCHvalue))
                            TotalCurrentLiabilities.append(ARCHvalue)
                        else:
                            pass
                    a.CurrentLiabilities = -sum(TotalCurrentLiabilities)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            # non-current liabilities
            try:
                #
                print('non-current liabilities')
                print(137*'-')
                #
                NonCurrentLiabilitiesDict = []
                #
                # long-term debt
                try:
                    LongTermDebt = []
                    for key,value in BalanceSheet.items():
                        if key == 'LongTermDebtNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Debt Non current: ' + str(ARCHvalue))
                            LongTermDebt.append(ARCHvalue)
                        elif key == 'LongTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Debt: ' + str(ARCHvalue))
                            LongTermDebt.append(ARCHvalue)
                        if key == 'TermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Term Debt: ' + str(ARCHvalue))
                            LongTermDebt.append(ARCHvalue)
                        else:
                            pass
                    tb.LongTermDebt = -sum(LongTermDebt)
                except:
                    pass
                #
                # retirement benefits
                try:
                    RetirementBenefits = []
                    for key,value in BalanceSheet.items():
                        if key == 'AccruedRetirementBenefits':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accrued Retirement Benefits: ' + str(ARCHvalue))
                            RetirementBenefits.append(ARCHvalue)
                        else:
                            pass
                    tb.RetirementBenefits = -sum(RetirementBenefits)
                except:
                    pass
                #
                # operating leases non-current
                try:
                    OperatingLeasesNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'OperatingLeaseLiabilityNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Operating Lease Liability Non current: ' + str(ARCHvalue))
                            OperatingLeasesNonCurrent.append(ARCHvalue)
                        if key == 'LongTermOperatingLeaseObligations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Operating Lease Obligations: ' + str(ARCHvalue))
                            OperatingLeasesNonCurrent.append(ARCHvalue)
                        if key == 'NoncurrentOperatingLeaseLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Noncurrent Operating Lease Liabilities: ' + str(ARCHvalue))
                            OperatingLeasesNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.OperatingLeasesNonCurrent = -sum(OperatingLeasesNonCurrent)
                except:
                    pass
                #
                # finance leases non-current
                try:
                    FinanceLeasesNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'LongTermFinanceLeaseObligations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Finance Lease Obligations: ' + str(ARCHvalue))
                            FinanceLeasesNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.FinanceLeasesNonCurrent = -sum(FinanceLeasesNonCurrent)
                except:
                    pass
                #
                # capital leases and financing obligations non-current
                try:
                    CapitalLeaseAndFinancingObligationsNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'LongTermCapitalLeaseAndFinancingObligations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Capital Lease And Financing Obligations: ' + str(ARCHvalue))
                            CapitalLeaseAndFinancingObligationsNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.CapitalLeaseAndFinancingObligationsNonCurrent = -sum(CapitalLeaseAndFinancingObligationsNonCurrent)
                except:
                    pass
                #
                # deferred revenue and deposits non-current
                try:
                    DeferredRevenueAndDepositsNonCurrentD = []
                    for key,value in BalanceSheet.items():
                        if key == 'DeferredRevenue':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Revenue: ' + str(ARCHvalue))
                            DeferredRevenueAndDepositsNonCurrentD.append(ARCHvalue)
                        elif key == 'DeferredRevenueNonCurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Revenue Non Current: ' + str(ARCHvalue))
                            DeferredRevenueAndDepositsNonCurrentD.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredRevenueAndDepositsNonCurrent = -sum(DeferredRevenueAndDepositsNonCurrentD)
                except:
                    pass
                #
                # Accrued Tax Liabilities Non Current
                try:
                    AccruedTaxLiabilitiesNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'LongTermIncomeTaxesPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Long Term Income Taxes Payable: ' + str(ARCHvalue))
                            AccruedTaxLiabilitiesNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.AccruedTaxLiabilitiesNonCurrent = -sum(AccruedTaxLiabilitiesNonCurrent)
                except:
                    pass
                #
                # deferred Tax Liabilities Non Current
                try:
                    DeferredTaxLiabilitiesNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'DeferredIncomeTaxesAndOther':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Taxes And Other: ' + str(ARCHvalue))
                            DeferredTaxLiabilitiesNonCurrent.append(ARCHvalue)
                        elif key == 'DeferredTaxLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Taxes And Other: ' + str(ARCHvalue))
                            DeferredTaxLiabilitiesNonCurrent.append(ARCHvalue)
                        elif key == 'DeferredTaxLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Taxes And Other: ' + str(ARCHvalue))
                            DeferredTaxLiabilitiesNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.DeferredTaxLiabilitiesNonCurrent = -sum(DeferredTaxLiabilitiesNonCurrent)
                except:
                    pass
                #
                # other non-current liabilities
                try:
                    OtherNonCurrentLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'OtherLiabilitiesNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Liabilities Non current: ' + str(ARCHvalue))
                            OtherNonCurrentLiabilities.append(ARCHvalue)
                        elif key == 'OtherNonCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Non Current Liabilities: ' + str(ARCHvalue))
                            OtherNonCurrentLiabilities.append(ARCHvalue)
                        elif key == 'OtherNoncurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Noncurrent Liabilities: ' + str(ARCHvalue))
                            OtherNonCurrentLiabilities.append(ARCHvalue)
                        else:
                            pass
                    tb.OtherNonCurrentLiabilities = -sum(OtherNonCurrentLiabilities)
                except:
                    pass
                #
                # discontinued operation non current liabilities
                try:
                    DiscontinuedOperationsLiabilitiesNonCurrent = []
                    for key,value in BalanceSheet.items():
                        if key == 'NoncurrentLiabilitiesOfDiscontinuedOperations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Noncurrent Liabilities Of Discontinued Operations: ' + str(ARCHvalue))
                            DiscontinuedOperationsLiabilitiesNonCurrent.append(ARCHvalue)
                        else:
                            pass
                    tb.DiscontinuedOperationsLiabilitiesNonCurrent = -sum(DiscontinuedOperationsLiabilitiesNonCurrent)
                except:
                    pass
                #
                # total non-current liabilities
                try:
                    TotalNonCurrentLiabilities = []
                    for key,value in BalanceSheet.items():
                        if key == 'LiabilitiesNoncurrent':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Liabilities Non current: ' + str(ARCHvalue))
                            TotalNonCurrentLiabilities.append(ARCHvalue)
                        elif key == 'TotalNonCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Non Current Liabilities: ' + str(ARCHvalue))
                            TotalNonCurrentLiabilities.append(ARCHvalue)
                        elif key == 'TotalOtherLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Other Liabilities: ' + str(ARCHvalue))
                            TotalNonCurrentLiabilities.append(ARCHvalue)
                        else:
                            pass
                    a.NonCurrentLiabilities = -sum(TotalNonCurrentLiabilities)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            # total liabilities
            try:
                print(137*'-')
                TotalLiabilities = []
                for key,value in BalanceSheet.items():
                    if key == 'Liabilities':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            else:
                                ARCHvalue = 0
                        print('Liabilities: ' + str(ARCHvalue))
                        TotalLiabilities.append(ARCHvalue)
                    elif key == 'TotalLiabilities':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            else:
                                ARCHvalue = 0
                        print('Total Liabilities: ' + str(ARCHvalue))
                        TotalLiabilities.append(ARCHvalue)
                    else:
                        pass
                a.Liabilities = -sum(TotalLiabilities)
                #
                print(137*'-')
                print('\n' * 3)
            except:
                pass
            #
            # shareholders' equity
            try:
                print('shareholders equity')
                print(137*'-')
                #
                StockholdersEquityDict = []   
                #
                # common shares
                try:
                    CommonShares = []
                    for key,value in BalanceSheet.items():
                        if key == 'CommonStocksIncludingAdditionalPaidInCapital':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stocks Including Additional Paid In Capital: ' + str(ARCHvalue))
                            CommonShares.append(ARCHvalue)
                        elif key == 'AdditionalPaidInCapital':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Additional Paid In Capital: ' + str(ARCHvalue))
                            CommonShares.append(ARCHvalue)
                        elif key == 'CommonStock':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stock: ' + str(ARCHvalue))
                            CommonShares.append(ARCHvalue)
                        elif key == 'CapitalInExcessOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Capital In Excess Of Par Value: ' + str(ARCHvalue))
                            CommonShares.append(ARCHvalue)
                        elif key == 'CostOfCommonStockInTreasury':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cost Of Common Stock In Treasury: ' + str(ARCHvalue))
                            CommonShares.append(ARCHvalue)
                        else:
                            pass
                    a.CommonShares = -sum(CommonShares)
                except:
                    pass
                #
                # retained earnings
                try:
                    RetainedEarningsAccumulatedDeficit = []
                    for key,value in BalanceSheet.items():
                        if key == 'RetainedEarningsAccumulatedDeficit':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Retained Earnings Accumulated Deficit: ' + str(ARCHvalue))
                            RetainedEarningsAccumulatedDeficit.append(ARCHvalue)
                        if key == 'RetainedEarnings':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Retained Earnings: ' + str(ARCHvalue))
                            RetainedEarningsAccumulatedDeficit.append(ARCHvalue)
                        else:
                            pass
                    a.RetainedEarnings = -sum(RetainedEarningsAccumulatedDeficit)
                except:
                    pass
                #
                # accumulated other comprehensive income
                try:
                    AccumulatedOtherComprehensiveIncomeLoss = []
                    for key,value in BalanceSheet.items():
                        if key == 'AccumulatedOtherComprehensiveIncomeLossNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accumulated Other Comprehensive Income Loss Net Of Tax: ' + str(ARCHvalue))
                            AccumulatedOtherComprehensiveIncomeLoss.append(ARCHvalue)
                        elif key == 'AccumulatedOtherComprehensiveIncomeLoss':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accumulated Other Comprehensive Income Loss: ' + str(ARCHvalue))
                            AccumulatedOtherComprehensiveIncomeLoss.append(ARCHvalue)
                        elif key == 'AccumulatedOtherComprehensiveLoss':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accumulated Other Comprehensive Loss: ' + str(ARCHvalue))
                            AccumulatedOtherComprehensiveIncomeLoss.append(ARCHvalue)
                        elif key == 'AccumulatedOtherComprehensiveIncome':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accumulated Other Comprehensive Income: ' + str(ARCHvalue))
                            AccumulatedOtherComprehensiveIncomeLoss.append(ARCHvalue)
                        else:
                            pass
                    a.AccumulatedOtherComprehensiveIncome = -sum(AccumulatedOtherComprehensiveIncomeLoss)
                except:
                    pass
                #
                # employee benefit trust
                try:
                    EmployeeBenefitTrust = []
                    for key,value in BalanceSheet.items():
                        if key == 'EmployeeBenefitTrust':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Employee Benefit Trust: ' + str(ARCHvalue))
                            EmployeeBenefitTrust.append(ARCHvalue)
                        else:
                            pass
                    a.EmployeeBenefitTrust = -sum(EmployeeBenefitTrust)
                except:
                    pass
                #
                # non controlling interests
                try:
                    NonControllingInterest = []
                    for key,value in BalanceSheet.items():
                        if key == 'NoncontrollingInterests':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Non Controlling Interest: ' + str(ARCHvalue))
                            NonControllingInterest.append(ARCHvalue)
                        else:
                            pass
                    a.NonControllingInterest = -sum(NonControllingInterest)
                except:
                    pass
                #
                # stockholders equity
                try:
                    StockholdersEquityD = []
                    for key,value in BalanceSheet.items():
                        if key == 'StockholdersEquity':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stockholders Equity: ' + str(ARCHvalue))
                            StockholdersEquityD.append(ARCHvalue)
                        elif key == 'TotalShareholdersEquity':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Shareholders Equity: ' + str(ARCHvalue))
                            StockholdersEquityD.append(ARCHvalue)
                        elif key == 'TotalEquity':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    BalanceSheet[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Equity: ' + str(ARCHvalue))
                            StockholdersEquityD.append(ARCHvalue)
                        else:
                            pass
                    a.StockholdersEquity = -sum(StockholdersEquityD)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            print(137*'-')
            #
            # total liabilities and stockholders' equity
            try:
                LiabilitiesAndStockholdersEquity = []
                for key,value in BalanceSheet.items():
                    if key == 'LiabilitiesAndStockholdersEquity':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            else:
                                ARCHvalue = 0
                        print('Liabilities And Stockholders Equity: ' + str(ARCHvalue))
                        LiabilitiesAndStockholdersEquity.append(ARCHvalue)
                    elif key == 'TotalLiabilitiesAndShareholdersEquity':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            else:
                                ARCHvalue = 0
                        print('Total Liabilities And Shareholders Equity: ' + str(ARCHvalue))
                        LiabilitiesAndStockholdersEquity.append(ARCHvalue)
                    elif key == 'TotalLiabilitiesAndEquity':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                BalanceSheet[key] = None
                            else:
                                ARCHvalue = 0
                        print('Total Liabilities And Equity: ' + str(ARCHvalue))
                        LiabilitiesAndStockholdersEquity.append(ARCHvalue)
                    else:
                        pass
                a.LiabilitiesAndStockholdersEquity = -sum(LiabilitiesAndStockholdersEquity)
            except:
                pass
            #
            print(137*'-')
            print('\n' * 3)
            #
            #
            # income statement
            print('income statement')
            print(137*'-')
            #
            # sales
            try:
                Sales = []
                for key,value in IncomeStatement.items():
                    if key == 'RevenueFromContractWithCustomerExcludingAssessedTax':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Revenue From Contract With Customer Excluding Assessed Tax: ' + str(ARCHvalue))
                        Sales.append(ARCHvalue)
                    elif key == 'NetSales':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Net Sales: ' + str(ARCHvalue))
                        Sales.append(ARCHvalue)
                    elif key == 'SalesofMachineryEnergyTransportation':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Sales of Machinery, Energy & Transportation: ' + str(ARCHvalue))
                        Sales.append(ARCHvalue)
                    elif key == 'MembershipAndOtherIncome':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Membership And Other Income: ' + str(ARCHvalue))
                        Sales.append(ARCHvalue)
                    elif key == 'Revenue':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Revenue: ' + str(ARCHvalue))
                        Sales.append(ARCHvalue)
                    else:
                        pass
                tb.Sales = -sum(Sales)
            except:
                pass
            #
            # cost of sales
            try:
                CostOfSales = []
                for key,value in IncomeStatement.items():
                    if key == 'CostOfGoodsAndServicesSold':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cost Of Goods And Services Sold: ' + str(ARCHvalue))
                        CostOfSales.append(ARCHvalue)
                    elif key == 'CostOfSales':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cost Of Sales: ' + str(ARCHvalue))
                        CostOfSales.append(ARCHvalue)
                    elif key == 'CostOfRevenue':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cost Of Revenue: ' + str(ARCHvalue))
                        CostOfSales.append(ARCHvalue)
                    elif key == 'CostOfGoodsSold':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cost of goods sold: ' + str(ARCHvalue))
                        CostOfSales.append(ARCHvalue)
                    else:
                        pass
                tb.CostOfSales = sum(CostOfSales)
            except:
                pass
            #
            # gross margin
            try:
                GrossMargin = []
                for key,value in IncomeStatement.items():
                    if key == 'GrossProfit':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Gross Profit: ' + str(ARCHvalue))
                        GrossMargin.append(ARCHvalue)
                    elif key == 'GrossMargin':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Gross Margin: ' + str(ARCHvalue))
                        GrossMargin.append(ARCHvalue)
                    else:
                        pass
                a.GrossMargin = -sum(GrossMargin)
            except:
                pass
            #
            # research and development
            try:
                ResearchAndDevelopment = []
                for key,value in IncomeStatement.items():
                    if key == 'ResearchAndDevelopmentExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Research And Development Expense: ' + str(ARCHvalue))
                        ResearchAndDevelopment.append(ARCHvalue)
                    elif key == 'ResearchAndDevelopment':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Research And Development: ' + str(ARCHvalue))
                        ResearchAndDevelopment.append(ARCHvalue)
                    elif key == 'ResearchAndDevelopmentExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Research and development expenses: ' + str(ARCHvalue))
                        ResearchAndDevelopment.append(ARCHvalue)
                    elif key == 'AcquiredInProcessResearchAndDevelopment':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Acquired in-process research and development: ' + str(ARCHvalue))
                        ResearchAndDevelopment.append(ARCHvalue)
                    else:
                        pass
                tb.ResearchAndDevelopment = sum(ResearchAndDevelopment)
            except:
                pass
            #
            # selling general, administrative and marketing
            try:
                SellingGeneralAdministrativeAndMarketing = []
                for key,value in IncomeStatement.items():
                    if key == 'SellingGeneralAndAdministrativeExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Selling General And Administrative Expense: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'SellingGeneralAndAdministrative':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Selling General And Administrative: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'SellingAndMarketingExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Selling And Marketing Expense: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'GeneralAndAdministrativeExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('General And Administrative Expense: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'SellingGeneralAndAdministrativeExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Selling, general and administrative expenses: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'OtherOperatingIncomeExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Other operating (income) expenses: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'InterestExpenseExcludingFinancialProducts':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Interest expense excluding Financial Products: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'OperatingSellingGeneralAndAdministrativeExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Operating, Selling, General And Administrative Expenses: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    elif key == 'MarketingSellingAndAdministrative':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Marketing, Selling And Administrative: ' + str(ARCHvalue))
                        SellingGeneralAdministrativeAndMarketing.append(ARCHvalue)
                    else:
                        pass
                tb.SellingGeneralAdministrativeAndMarketing = sum(SellingGeneralAdministrativeAndMarketing)
            except:
                pass
            #
            # total operating expense
            try:
                OperatingExpenses = []
                for key,value in IncomeStatement.items():
                    if key == 'OperatingExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Operating Expenses: ' + str(ARCHvalue))
                        OperatingExpenses.append(ARCHvalue)
                    elif key == 'TotalOperatingExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Total Operating Expenses: ' + str(ARCHvalue))
                        OperatingExpenses.append(ARCHvalue)
                    elif key == 'CostsAndExpenses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Costs And Expenses: ' + str(ARCHvalue))
                        OperatingExpenses.append(ARCHvalue)
                    elif key == 'TotalOperatingCosts':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Total operating costs: ' + str(ARCHvalue))
                        OperatingExpenses.append(ARCHvalue)
                    else:
                        pass
                a.OperatingExpenses = sum(OperatingExpenses)
            except:
                pass
            #
            # total operating income
            try:
                OperatingIncome = []
                for key,value in IncomeStatement.items():
                    if key == 'OperatingIncome':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Operating Income: ' + str(ARCHvalue))
                        OperatingIncome.append(ARCHvalue)
                    else:
                        pass
                a.OperatingIncome = -sum(OperatingIncome)
            except:
                pass
            #
            # Asset Impairment, restructuring, and other special charges
            try:
                ImpairmentRestructuringAndOtherSpecialCharges = []
                for key,value in IncomeStatement.items():
                    if key == 'AssetImpairmentRestructuringAndOtherSpecialChargesNote':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Asset Impairment Restructuring And Other Special Charges (Note): ' + str(ARCHvalue))
                        ImpairmentRestructuringAndOtherSpecialCharges.append(ARCHvalue)
                    else:
                        pass
                tb.ImpairmentRestructuringAndOtherSpecialCharges = sum(ImpairmentRestructuringAndOtherSpecialCharges)
            except:
                pass
            #
            # non-operating income (expense)
            try:
                NonOperatingIncome = []
                for key,value in IncomeStatement.items():
                    if key == 'NonoperatingIncomeExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Non operating Income Expense: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'OtherIncomeExpenseNet':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Other Income Expense Net: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'RevenuesOfFinancialProducts':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Revenues of Financial Products: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'InterestExpenseOfFinancialProducts':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Interest expense of Financial Products: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'GoodwillImpairmentCharge':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Goodwill impairment charge: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'OtherIncomeExpense':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Other income (expense): ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'InterestNet':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Interest, Net: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'LossOnExtinguishmentOfDebt':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Loss On Extinguishment Of Debt: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'OtherGainsAndLosses':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Other Gains And Losses: ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    elif key == 'OtherNetIncomeExpenseNote':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Other Net (Income) Expense (Note): ' + str(ARCHvalue))
                        NonOperatingIncome.append(ARCHvalue)
                    else:
                        pass
                tb.NonOperatingIncome = -sum(NonOperatingIncome)
            except:
                pass
            #
            # income before taxes
            try:
                IncomeBeforeTaxes = []
                for key,value in IncomeStatement.items():
                    if key == 'IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Income Loss From Continuing Operations Before Income Taxes Extraordinary Items Non controlling Interest: ' + str(ARCHvalue))
                        IncomeBeforeTaxes.append(ARCHvalue)
                    elif key == 'IncomeBeforeProvisionForIncomeTaxes':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Income Before Provision For Income Taxes: ' + str(ARCHvalue))
                        IncomeBeforeTaxes.append(ARCHvalue)
                    elif key == 'ConsolidatedProfitBeforeTaxes':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Consolidated profit before taxes: ' + str(ARCHvalue))
                        IncomeBeforeTaxes.append(ARCHvalue)
                    elif key == 'IncomeBeforeIncomeTaxes':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Income Before Income Taxes: ' + str(ARCHvalue))
                        IncomeBeforeTaxes.append(ARCHvalue)
                    else:
                        pass
                a.IncomeBeforeTaxes = -sum(IncomeBeforeTaxes)
            except:
                pass
            #
            # income tax expense benefit
            try:
                IncomeTaxExpenseBenefit = []
                for key,value in IncomeStatement.items():
                    if key == 'IncomeTaxExpenseBenefit':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Income Tax Expense Benefit: ' + str(ARCHvalue))
                        IncomeTaxExpenseBenefit.append(ARCHvalue)
                    elif key == 'ProvisionForIncomeTaxes':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Provision For Income Taxes: ' + str(ARCHvalue))
                        IncomeTaxExpenseBenefit.append(ARCHvalue)
                    elif key == 'ProvisionBenefitForIncomeTaxes':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Provision (benefit) for income taxes: ' + str(ARCHvalue))
                        IncomeTaxExpenseBenefit.append(ARCHvalue)
                    elif key == 'IncomeTaxesNote':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Income Taxes: ' + str(ARCHvalue))
                        IncomeTaxExpenseBenefit.append(ARCHvalue)
                    else:
                        pass
                tb.IncomeTaxExpenseBenefit = sum(IncomeTaxExpenseBenefit)
            except:
                pass
            #
            # Net Income From Discontinued Operations
            try:
                NetIncomeFromDiscontinuedOperations = []
                for key,value in IncomeStatement.items():
                    if key == 'NetIncomeLossFromDiscontinuedOperations':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Net Income Loss From Discontinued Operations: ' + str(ARCHvalue))
                        NetIncomeFromDiscontinuedOperations.append(ARCHvalue)
                    else:
                        pass
                tb.NetIncomeFromDiscontinuedOperations = -sum(NetIncomeFromDiscontinuedOperations)
            except:
                pass
            #
            # net income
            try:
                NetIncome = []
                for key,value in IncomeStatement.items():
                    if key == 'NetIncomeLoss':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Net Income Loss: ' + str(ARCHvalue))
                        NetIncome.append(ARCHvalue)
                    elif key == 'NetIncome':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Net Income: ' + str(ARCHvalue))
                        NetIncome.append(ARCHvalue)
                    elif key == 'ConsolidatedNetIncome':
                        try:
                            i = 0
                            while value[i] == None:
                                i = i + 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                IncomeStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Consolidated Net Income: ' + str(ARCHvalue))
                        NetIncome.append(ARCHvalue)
                    else:
                        pass
                a.NetIncome = -sum(NetIncome)
            except:
                pass
            #
            print('\n' * 3)
            #
            #
            # comprehensive income
            print('other comprehensive income')
            print(137*'-')
            #
            try:
                OtherComprehensiveIncomeDict = []
                #
                # change in foreign currency translation adjustment net of taxes
                try:
                    ChangeInForeignCurrencyTranslationAdjustment = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'ForeignCurrencyTransactionAndTranslationAdjustmentNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Foreign Currency Transaction And Translation Adjustment Net Of Tax: ' + str(ARCHvalue))
                            ChangeInForeignCurrencyTranslationAdjustment.append(ARCHvalue)
                        elif key == 'ChangeInForeignCurrencyTranslationNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Foreign Currency Translation, Net Of Tax: ' + str(ARCHvalue))
                            ChangeInForeignCurrencyTranslationAdjustment.append(ARCHvalue)
                        elif key == 'ChangeInForeignCurrencyTranslationNetOfTaxEffectsOfAndRespectively':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Loss Change In Foreign Currency Translation Net Of Tax Effects Of And Respectively: ' + str(ARCHvalue))
                            ChangeInForeignCurrencyTranslationAdjustment.append(ARCHvalue)
                        elif key == 'CurrencyTranslationAndOther':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Currency Translation And Other: ' + str(ARCHvalue))
                            ChangeInForeignCurrencyTranslationAdjustment.append(ARCHvalue)
                        elif key == 'ChangeInForeignCurrencyTranslationGainsLosses':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Foreign Currency Translation Gains (Losses): ' + str(ARCHvalue))
                            ChangeInForeignCurrencyTranslationAdjustment.append(ARCHvalue)
                        else:
                            pass
                    tb.ChangeInForeignCurrencyTranslationAdjustment = -sum(ChangeInForeignCurrencyTranslationAdjustment)
                except:
                    pass
                #
                # change in unrealized gains (losses) on derivative instruments net of taxes
                try:
                    ChangeInUnrealizedGainsLossesOnDerivativeInstruments = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'DerivativeInstrumentGainLossbeforeReclassificationafterTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Derivative Instrument Gain Loss before Reclassification after Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'UnrealizedGainLossOnDerivativesArisingDuringPeriodNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Unrealized Gain Loss On Derivatives Arising During Period Net Of Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'CashFlowHedgeGainLossReclassificationAfterTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Flow Hedge Gain Loss Reclassification After Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(-value)
                        elif key == 'ReclassificationAdjustmentFromAOCIOnDerivativesNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Reclassification Adjustment From AOCI On Derivatives Net Of Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(-value)
                        elif key == 'ChangeInFairValueOfDerivativesNetOfTaxBenefitExpenseOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Derivatives Net Of Tax Benefit Expense Of: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'AdjustmentForNetGainsLossesRealizedAndIncludedInNetIncomeNetOfTaxExpenseBenefitOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustment For Net Gains Losses Realized And Included In Net Income Net Of Tax Expense Benefit Of: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'ChangeInFairValueOfDerivatives':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Derivatives: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'AdjustmentForNetGainsLossesRealizedAndIncludedInNetIncome':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustment For Net Gains (Losses) Realized And Included In Net Income: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'ChangeInFairValueOfDerivativesNetOfTaxBenefitExpenseOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Derivatives Net Of Tax Benefit Expense Of: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'AdjustmentForNetGainsLossesRealizedAndIncludedInNetIncomeNetOfTaxExpenseBenefitOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustment For Net Gains Losses Realized And Included In Net Income, Net Of Tax Expense Benefit Of: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'NetInvestmentHedges':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Net Investment Hedges: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'CashFlowHedges':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Flow Hedges: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        elif key == 'ChangeInEffectivePortionOfCashFlowHedges':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Effective Portion Of Cash Flow Hedges: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnDerivativeInstruments.append(ARCHvalue)
                        else:
                            pass
                    tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments = -sum(ChangeInUnrealizedGainsLossesOnDerivativeInstruments)
                except:
                    pass
                #
                # change in unrealized gains (losses) on investment, net of taxes
                try:
                    ChangeInUnrealizedGainsLossesOnInvestments = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'UnrealizedHoldingGainLossOnSecuritiesArisingDuringPeriodNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Unrealized Holding Gain Loss On Securities Arising During Period Net Of Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'LossReclassificationAdjustmentFromAOCIForSaleOfSecuritiesNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Reclassification Adjustment From AOCI For Sale Of Securities Net Of Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'ChangeInFairValueOfMarketableSecuritiesNetOfTaxBenefitExpenseOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Marketable Securities NetOfTaxBenefitExpenseOf: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'AdjustmentForNetGainsLossesRealizedAndIncludedInNetIncomeNetOfTaxExpenseBenefitOf':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustment For Net Gains Losses Realized And Included In Net Income Net Of Tax Expense Benefit Of: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'AvailableForSaleSecuritiesAdjustmentAndOtherNetofTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Available For Sale Securities Adjustment And Other Net of Tax: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'ChangeInFairValueOfMarketableDebtSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Marketable Debt Securities: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'AdjustmentForNetGainsLossesRealizedAndIncludedInNetIncome':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustment For Net Gains Losses Realized And Included In Net Income: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'ChangeInFairValueOfMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Fair Value Of Marketable Securities: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'UnrealizedGainOnAvailableForSaleSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Unrealized Gain On Available For Sale Securities: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        elif key == 'ChangeInNetUnrealizedGainsLossesOnSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Net Unrealized Gains (Losses) On Securities: ' + str(ARCHvalue))
                            ChangeInUnrealizedGainsLossesOnInvestments.append(ARCHvalue)
                        else:
                            pass 
                    tb.ChangeInUnrealizedGainsLossesOnInvestments = -sum(ChangeInUnrealizedGainsLossesOnInvestments)
                except:
                    pass
                #
                # change in defined benefit pension and other similar plans
                try:
                    ChangeInDefinedBenefitPensionAndOtherSimilarPlans = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'ChangeInDefinedBenefitPensionAndRetireeHealthBenefitPlans':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Defined Pension And Retiree Health Benefit Plans: ' + str(ARCHvalue))
                            ChangeInDefinedBenefitPensionAndOtherSimilarPlans.append(ARCHvalue)
                        else:
                            pass 
                    tb.ChangeInDefinedBenefitPensionAndOtherSimilarPlans = -sum(ChangeInDefinedBenefitPensionAndOtherSimilarPlans)
                except:
                    pass
                #
                # income tax on other comprehensive income
                try:
                    IncomeTaxOnOtherComprehensiveIncome = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'BenefitProvisionForIncomeTaxesRelatedToOtherComprehensiveIncomeLossFromContinuingOperations':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Benefit (Provision) For Income Taxes Related To Other Comprehensive Income (Loss) From Continuing Operations: ' + str(ARCHvalue))
                            IncomeTaxOnOtherComprehensiveIncome.append(ARCHvalue)
                        else:
                            pass 
                    tb.IncomeTaxOnOtherComprehensiveIncome = -sum(IncomeTaxOnOtherComprehensiveIncome)
                except:
                    pass
                #
                # other comprehensive income
                try:
                    ComprehensiveIncomeD = []
                    for key,value in ComprehensiveIncome.items():
                        if key == 'ComprehensiveIncomeNetOfTax':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Comprehensive Income Net Of Tax: ' + str(ARCHvalue))
                            ComprehensiveIncomeD.append(ARCHvalue)
                        elif key == 'TotalComprehensiveIncome':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Total Comprehensive Income: ' + str(ARCHvalue))
                            ComprehensiveIncomeD.append(ARCHvalue)
                        elif key == 'ComprehensiveIncomeLoss':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    ComprehensiveIncome[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Comprehensive Income (Loss): ' + str(ARCHvalue))
                            ComprehensiveIncomeD.append(ARCHvalue)
                        else:
                            pass
                    a.ComprehensiveIncome = -sum(ComprehensiveIncomeD)
                    a.OtherComprehensiveIncome = a.ComprehensiveIncome - a.NetIncome
                except:
                    pass
            except:
                pass
            #
            print('\n' * 3)
            #
            # stockholders equity
            print("stockholders equity")
            print(137*'-')
            #
            try:
                #
                # common stock issued
                try:
                    CommonStockIssued = []
                    for key,value in StockholdersEquity.items():
                        if key == 'StockIssuedDuringPeriodValueNewIssues':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stock Issued During Period Value New Issues: ' + str(ARCHvalue))
                            CommonStockIssued.append(ARCHvalue)
                        elif key == 'CommonStockIssuedNetOfSharesWithheldForEmployeeTaxes':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stock Issued Net Of Shares Withheld For Employee Taxes: ' + str(ARCHvalue))
                            CommonStockIssued.append(ARCHvalue)
                        elif key == 'StockIssuedDuringPeriodValueStockOptionsExercised':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stock Issued During Period Value Stock Options Exercised: ' + str(ARCHvalue))
                            CommonStockIssued.append(ARCHvalue)
                        elif key == 'CommonStockIssued':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stock Issued: ' + str(ARCHvalue))
                            CommonStockIssued.append(ARCHvalue)
                        else:
                            pass
                    tb.CommonStockIssued = -sum(CommonStockIssued)
                except:
                    pass
                #
                # share based compensation and other stockholders equity components
                try:
                    ShareBasedCompensation = []
                    for key,value in StockholdersEquity.items():
                        if key == 'AdjustmentsRelatedToTaxWithholdingForShareBasedCompensation':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustments Related To Tax Withholding For Share Based Compensation: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'AdjustmentsToAdditionalPaidInCapitalSharebasedCompensationRequisiteServicePeriodRecognitionValue':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adjustments To Additional Paid In Capital Share based Compensation Requisite Service Period Recognition Value: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'IncreaseDecreaseInStockholdersEquityRollForwardShareBasedCompensation':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Stockholders Equity RollForward Share Based Compensation: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'IncreaseDecreaseInStockholdersEquityRollForwardCommonStockIssuedNetOfSharesWithheldForEmployeeTaxes':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Stockholders Equity RollForward Common Stock Issued Net Of Shares Withheld For Employee Taxes: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'ShareholdersEquityShareBasedCompensation':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Shareholders Equity Share Based Compensation: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'StockIssuedDuringPeriodValueRestrictedStockUnitBeforeTaxSettlement':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stock Issued During Period Value Restricted Stock Unit Before Tax Settlement: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'ShareBasedCompensation':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Share Based Compensation: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        elif key == 'CommonStockWithheldRelatedToNetShareSettlementOfEquityAwards':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stock Withheld Related To Net Share Settlement Of Equity Awards: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        else:
                            pass
                    tb.ShareBasedCompensation = -sum(ShareBasedCompensation)
                except:
                    pass
                #
                # dividends and dividend equivalents declared
                try:
                    DividendsAndDividendEquivalentsDeclared = []
                    for key,value in StockholdersEquity.items():
                        if key == 'Dividends':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Dividends: ' + str(ARCHvalue))
                            DividendsAndDividendEquivalentsDeclared.append(ARCHvalue)
                        elif key == 'DividendsAndDividendEquivalentsDeclared':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Dividends And Dividend Equivalents Declared: ' + str(ARCHvalue))
                            DividendsAndDividendEquivalentsDeclared.append(ARCHvalue)
                        elif key == 'CashDividendsDeclared':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Dividends Declared: ' + str(ARCHvalue))
                            DividendsAndDividendEquivalentsDeclared.append(ARCHvalue)
                        elif key == 'CashDividendDeclaredToNonControllingInterest':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Dividends Declared: ' + str(ARCHvalue))
                            DividendsAndDividendEquivalentsDeclared.append(ARCHvalue)
                        else:
                            pass
                    tb.DividendsAndDividendEquivalentsDeclared = -sum(DividendsAndDividendEquivalentsDeclared)
                except:
                    pass
                #
                # common stock repurchased and retired
                try:
                    CommonStockRepurchasedAndRetired = []
                    for key,value in StockholdersEquity.items():
                        if key == 'StockRepurchasedAndRetiredDuringPeriodValue':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stock Repurchased And Retired During Period Value: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        elif key == 'RepurchasesOfCommonStock':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repurchases Of Common Stock: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        elif key == 'RepurchaseOfCommonStock':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repurchase Of Common Stock: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        elif key == 'StockRepurchasedDuringPeriodValue':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Stock Repurchased During Period Value: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        elif key == 'CommonStockRepurchased':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Common Stock Repurchased: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        elif key == 'PurchaseOfCompanyStock':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Purchase Of Company Stock: ' + str(ARCHvalue))
                            CommonStockRepurchasedAndRetired.append(ARCHvalue)
                        else:
                            pass
                    tb.CommonStockRepurchasedAndRetired = -sum(CommonStockRepurchasedAndRetired)
                except:
                    pass
                #
                # effect of adoption of new accounting pronouncement or tax cuts
                try:
                    EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts = []
                    for key,value in StockholdersEquity.items():
                        if key == 'CumulativeEffectOfChangeInAccountingPrinciple':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cumulative Effect Of Change In Accounting Principle: ' + str(ARCHvalue))
                            EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts.append(ARCHvalue)
                        if key == 'AdoptionOfNewAccountingStandardsNetOfIncomeTaxes':
                            try:
                                i = len(value) - 1
                                while value[i] == None:
                                    i = i - 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    StockholdersEquity[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Adoption Of New Accounting Standards Net Of Income Taxes: ' + str(ARCHvalue))
                            EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts.append(ARCHvalue)
                        else:
                            pass
                    tb.EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts = sum(EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            print('cash flow')
            #
            # cash beginning balance
            print(137*'-')
            try:
                CashBeginningBalanceD = []
                for key,value in CashFlowStatement.items():
                    if key == 'CashAndCashEquivalentsBeginningOfTheYear':
                        try:
                            i = len(value) - 1
                            while value[i] == None:
                                i = i - 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                CashFlowStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cash And Cash Equivalents Beginning Of The Year: ' + str(ARCHvalue))
                        CashBeginningBalanceD.append(ARCHvalue)
                    elif key == 'CashCashEquivalentsAndRestrictedCashBeginningBalances':
                        try:
                            i = len(value) - 1
                            while value[i] == None:
                                i = i - 1
                            ARCHvalue = value[i]
                            value[i] = None
                        except:
                            if value != None:
                                ARCHvalue = value
                                CashFlowStatement[key] = None
                            else:
                                ARCHvalue = 0
                        print('Cash Cash Equivalents And Restricted Cash Beginning Balances: ' + str(ARCHvalue))
                        CashBeginningBalanceD.append(ARCHvalue)
                    else:
                        pass 
                cf.CashBeginningBalance = sum(CashBeginningBalanceD)
            except:
                pass
            print('\n' * 3)
            #
            # operating activities
            try:
                print('operating activities')
                print(137*'-')
                #
                OperatingActivitiesDict = []
                #
                # depreciation depletion and amortization
                try:
                    DepreciationDepletionAndAmortization = []
                    for key,value in CashFlowStatement.items():
                        if key == 'DepreciationDepletionAndAmortization':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Depreciation Depletion And Amortization: ' + str(ARCHvalue))
                            DepreciationDepletionAndAmortization.append(ARCHvalue)
                        elif key == 'DepreciationAndAmortization':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Depreciation And Amortization: ' + str(ARCHvalue))
                            DepreciationDepletionAndAmortization.append(ARCHvalue)
                        else:
                            pass
                    cf.DepreciationDepletionAndAmortization = sum(DepreciationDepletionAndAmortization)
                except:
                    pass
                #
                # share based compensation
                try:
                    ShareBasedCompensation = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ShareBasedCompensation':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Share Based Compensation: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        if key == 'ShareBasedCompensationExpense':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Share Based Compensation Expense: ' + str(ARCHvalue))
                            ShareBasedCompensation.append(ARCHvalue)
                        else:
                            pass
                    cf.ShareBasedCompensation = sum(ShareBasedCompensation)
                except:
                    pass
                #
                # deferred income tax expense (benefit)
                try:
                    DeferredIncomeTaxExpenseBenefit = []
                    for key,value in CashFlowStatement.items():
                        if key == 'DeferredIncomeTaxExpenseBenefit':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Tax Expense Benefit: ' + str(ARCHvalue))
                            DeferredIncomeTaxExpenseBenefit.append(ARCHvalue)
                        if key == 'DeferredIncomeTaxExpense':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Tax Expense: ' + str(ARCHvalue))
                            DeferredIncomeTaxExpenseBenefit.append(ARCHvalue)
                        if key == 'DeferredIncomeTaxBenefit':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Income Tax Benefit: ' + str(ARCHvalue))
                            DeferredIncomeTaxExpenseBenefit.append(ARCHvalue)
                        else:
                            pass
                    cf.DeferredIncomeTaxExpenseBenefit = sum(DeferredIncomeTaxExpenseBenefit)
                except:
                    pass
                #
                # other non cash income expense
                try:
                    OtherNonCashIncomeExpense = []
                    for key,value in CashFlowStatement.items():
                        if key == 'OtherNoncashIncomeExpense':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Non cash Income Expense: ' + str(ARCHvalue))
                            OtherNonCashIncomeExpense.append(ARCHvalue)
                        else:
                            pass
                    cf.OtherNonCashIncomeExpense = -sum(OtherNonCashIncomeExpense)
                except:
                    pass
                #
                # increase (decrease) in accounts receivable
                try:
                    IncreaseDecreaseInAccountsReceivable = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInAccountsReceivable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Accounts Receivable: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsReceivable.append(ARCHvalue)
                        if key == 'AccountsReceivableNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Changes In Operating Assets And Liabilities Accounts ReceivableNet: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsReceivable.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInAccountsReceivable = sum(IncreaseDecreaseInAccountsReceivable)
                except:
                    pass
                #
                # increase (decrease) in inventories
                try:
                    IncreaseDecreaseInInventories = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInInventories':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Inventories: ' + str(ARCHvalue))
                            IncreaseDecreaseInInventories.append(ARCHvalue)
                        if key == 'Inventories':
                            ARCHvalue = -value
                            print('Changes In Operating Assets And Liabilities Inventories: ' + str(ARCHvalue))
                            IncreaseDecreaseInInventories.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInInventories = -sum(IncreaseDecreaseInInventories)
                except:
                    pass
                #
                # increase (decrease) in other receivables and prepaid expenses
                try:
                    IncreaseDecreaseInOtherReceivables = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInOtherReceivables':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Other Receivables: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherReceivables.append(ARCHvalue)
                        if key == 'VendorNonTradeReceivables':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Vendor Non Trade Receivables: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherReceivables.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInPrepaidDeferredExpenseAndOtherAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Prepaid Deferred Expense And Other Assets: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherReceivables.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInOtherAccountsPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Other Accounts Payable: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherReceivables.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInOtherReceivables = sum(IncreaseDecreaseInOtherReceivables)
                except:
                    pass
                #
                # increase (decrease) in accounts payable and accrued liabilities
                try:
                    IncreaseDecreaseInAccountsPayableAndAccruedLiabilities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInAccountsPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Accounts Payable: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        if key == 'AccountsPayable':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Accounts Payable: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInAccountsPayableTrade':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Accounts Payable Trade: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInAccruedLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Accrued Liabilities: ' + str(ARCHvalue))
                            IncreaseDecreaseInAccountsPayableAndAccruedLiabilities.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInAccountsPayableAndAccruedLiabilities = sum(IncreaseDecreaseInAccountsPayableAndAccruedLiabilities)
                except:
                    pass
                #
                # increase (decrease) in contract with customer liability
                try:
                    IncreaseDecreaseInContractWithCustomerLiability = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInContractWithCustomerLiability':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Contract With Customer Liability: ' + str(ARCHvalue))
                            IncreaseDecreaseInContractWithCustomerLiability.append(ARCHvalue)
                        if key == 'DeferredRevenue':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Deferred Revenue: ' + str(ARCHvalue))
                            IncreaseDecreaseInContractWithCustomerLiability.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInContractWithCustomerLiability = sum(IncreaseDecreaseInContractWithCustomerLiability)
                except:
                    pass
                #
                # increase (decrease) in other operating activities
                try:
                    IncreaseDecreaseInOtherOperatingActivities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'IncreaseDecreaseInOtherOperatingAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Other Operating Assets: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherOperatingActivities.append(ARCHvalue)
                        if key == 'OtherCurrentAndNonCurrentAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Current And Non Current Assets: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherOperatingActivities.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInOtherOperatingLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Other Operating Liabilities: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherOperatingActivities.append(ARCHvalue)
                        if key == 'OtherCurrentAndNonCurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Other Current And Non Current Liabilities: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherOperatingActivities.append(ARCHvalue)
                        if key == 'IncreaseDecreaseInOtherNoncurrentLiabilities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Increase Decrease In Other Non current Liabilities: ' + str(ARCHvalue))
                            IncreaseDecreaseInOtherOperatingActivities.append(ARCHvalue)
                        else:
                            pass
                    cf.IncreaseDecreaseInOtherOperatingActivities = sum(IncreaseDecreaseInOtherOperatingActivities)
                except:
                    pass
                #
                # total operating activities
                try:
                    OperatingActivities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'NetCashProvidedByUsedInOperatingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Net Cash Provided By Used In Operating Activities: ' + str(ARCHvalue))
                            OperatingActivities.append(ARCHvalue)
                        if key == 'CashGeneratedByOperatingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Generated By Operating Activities: ' + str(ARCHvalue))
                            OperatingActivities.append(ARCHvalue)
                        else:
                            pass
                    a.OperatingActivities = sum(OperatingActivities)
                    print('\n' * 3)
                except:
                    pass
            except:
                pass
            #
            # investing activities
            try:
                print('investing activities')
                print(137*'-')
                #
                InvestingActivitiesDict = []
                #
                # Payments To Acquire Investment
                try:
                    PaymentsToAcquireInvestments = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsToAcquireAvailableForSaleSecuritiesDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Available For Sale Securities Debt: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        if key == 'PaymentsToAcquireOtherInvestments':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Other Investments: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        if key == 'PaymentsForProceedsFromOtherInvestingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Proceeds From Other Investing Activities: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        if key == 'PurchasesOfMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Purchases Of Marketable Securities: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        if key == 'PurchasesOfNonMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Purchases Of Non Marketable Securities: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        if key == 'PaymentsToAcquireMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Marketable Securities: ' + str(ARCHvalue))
                            PaymentsToAcquireInvestments.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsToAcquireInvestments = sum(PaymentsToAcquireInvestments)
                except:
                    pass
                #
                # Proceeds Of Investment
                try:
                    ProceedsOfInvestments = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ProceedsFromMaturitiesPrepaymentsAndCallsOfAvailableForSaleSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Maturities Prepayments And Calls Of Available For Sale Securities: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        elif key == 'ProceedsFromSaleOfAvailableForSaleSecuritiesDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Sale Of Available For Sale Securities Debt: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        elif key == 'ProceedsFromSaleAndMaturityOfOtherInvestments':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Sale And Maturity Of Other Investments: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        elif key == 'ProceedsFromMaturitiesOfMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Maturities Of Marketable Securities: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        elif key == 'ProceedsFromSalesOfMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Sales Of Marketable Securities: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        elif key == 'ProceedsFromNonMarketableSecurities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Non Marketable Securities: ' + str(ARCHvalue))
                            ProceedsOfInvestments.append(ARCHvalue)
                        else:
                            pass
                    cf.ProceedsOfInvestments = sum(ProceedsOfInvestments)
                except:
                    pass
                #
                # Payments To Acquire Property Plant And Equipment
                try:
                    PaymentsToAcquirePropertyPlantAndEquipment = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsToAcquirePropertyPlantAndEquipment':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Property Plant And Equipment: ' + str(ARCHvalue))
                            PaymentsToAcquirePropertyPlantAndEquipment.append(-value)
                        if key == 'PaymentsForAcquisitionOfPropertyPlantAndEquipment':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Acquisition Of Property Plant And Equipment: ' + str(ARCHvalue))
                            PaymentsToAcquirePropertyPlantAndEquipment.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsToAcquirePropertyPlantAndEquipment = sum(PaymentsToAcquirePropertyPlantAndEquipment)
                except:
                    pass
                #
                # Payments To Acquire Businesses and Intangibles Net Of Cash Acquired
                try:
                    PaymentsToAcquireBusinessesAndIntangibles = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsToAcquireBusinessesNetOfCashAcquired':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Businesses Net Of Cash Acquired: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        if key == 'PaymentsMadeInConnectionWithBusinessAcquisitionsNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments Made In Connection With Business Acquisitions Net: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        if key == 'PaymentsForAcquisitionOfIntangibleAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Acquisition Of Intangible Assets: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        if key == 'PaymentsForStrategicInvestmentsNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Strategic Investments Net: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        if key == 'PaymentsForStrategicInvestments':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Strategic Investments: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        if key == 'PaymentsToAcquireBusinessesNetOfCashAcquiredAndPurchasesOfIntangibleAndOtherAssets':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments To Acquire Businesses Net Of Cash Acquired And Purchases Of Intangible And Other Assets: ' + str(ARCHvalue))
                            PaymentsToAcquireBusinessesAndIntangibles.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsToAcquireBusinessesAndIntangibles = sum(PaymentsToAcquireBusinessesAndIntangibles)
                except:
                    pass
                #
                # Total Investing Activities
                try:
                    InvestingActivities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'NetCashProvidedByUsedInInvestingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Net Cash Provided By Used In Investing Activities: ' + str(ARCHvalue))
                            InvestingActivities.append(ARCHvalue)
                        if key == 'CashGeneratedByUsedInInvestingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Generated By Used In Investing Activities: ' + str(ARCHvalue))
                            InvestingActivities.append(ARCHvalue)
                        if key == 'CashUsedInInvestingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Used In Investing Activities: ' + str(ARCHvalue))
                            InvestingActivities.append(ARCHvalue)
                        else:
                            pass
                    a.InvestingActivities = sum(InvestingActivities)
                except:
                    pass
                #
                print('\n' * 3)
                #
            except:
                pass
            #
            # financing activities
            try:

                print('financing activities')
                print(137*'-')
                #
                FinancingActivitiesDict = []
                #
                # Finance Lease Principal Payments
                try:
                    FinanceLeasePrincipalPayments = []
                    for key,value in CashFlowStatement.items():
                        if key == 'FinanceLeasePrincipalPayments':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Finance Lease Principal Payments: ' + str(ARCHvalue))
                            FinanceLeasePrincipalPayments.append(ARCHvalue)
                        else:
                            pass
                    cf.FinanceLeasePrincipalPayments = sum(FinanceLeasePrincipalPayments)
                except:
                    pass        
                #
                # Proceeds From Issuance Of Common Stock
                try:
                    ProceedsFromIssuanceOfCommonStock = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ProceedsFromIssuanceOfCommonStock':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Issuance Of Common Stock: ' + str(ARCHvalue))
                            ProceedsFromIssuanceOfCommonStock.append(ARCHvalue)
                        else:
                            pass
                    cf.ProceedsFromIssuanceOfCommonStock = sum(ProceedsFromIssuanceOfCommonStock)
                except:
                    pass
                #
                # Payments Related To Tax Withholding For Share Based Compensation
                try:
                    PaymentsRelatedToTaxWithholdingForShareBasedCompensation = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsRelatedToTaxWithholdingForShareBasedCompensation':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments Related To Tax Withholding For Share Based Compensation: ' + str(ARCHvalue))
                            PaymentsRelatedToTaxWithholdingForShareBasedCompensation.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsRelatedToTaxWithholdingForShareBasedCompensation = -sum(PaymentsRelatedToTaxWithholdingForShareBasedCompensation)
                except:
                    pass
                #
                # Payments Of Dividends
                try:
                    PaymentsOfDividends = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsOfDividends':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments Of Dividends: ' + str(ARCHvalue))
                            PaymentsOfDividends.append(ARCHvalue)
                        if key == 'PaymentsForDividendsAndDividendEquivalents':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Dividends And Dividend Equivalents: ' + str(ARCHvalue))
                            PaymentsOfDividends.append(ARCHvalue)
                        if key == 'DividendsAndDividendEquivalentsPaid':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Dividends And Dividend Equivalents Paid: ' + str(ARCHvalue))
                            PaymentsOfDividends.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsOfDividends = sum(PaymentsOfDividends)
                except:
                    pass
                #
                # Payments For Repurchase Of Common Stock
                try:
                    PaymentsForRepurchaseOfCommonStock = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsForRepurchaseOfCommonStock':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Repurchase Of Common Stock: ' + str(ARCHvalue))
                            PaymentsForRepurchaseOfCommonStock.append(ARCHvalue)
                        if key == 'RepurchasesOfCommonStock':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repurchases Of Common Stock: ' + str(ARCHvalue))
                            PaymentsForRepurchaseOfCommonStock.append(-value)
                        if key == 'RepurchaseOfCommonStock':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repurchase Of Common Stock: ' + str(ARCHvalue))
                            PaymentsForRepurchaseOfCommonStock.append(-value)
                        else:
                            pass
                    cf.PaymentsForRepurchaseOfCommonStock = -sum(PaymentsForRepurchaseOfCommonStock)
                except:
                    pass
                #
                # Payments For Taxes Related To Net Share Settlement Of Equity Award
                try:
                    PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward = []
                    for key,value in CashFlowStatement.items():
                        if key == 'PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Taxes Related To Net Share Settlement Of Equity Award: ' + str(ARCHvalue))
                            PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward.append(ARCHvalue)
                        if key == 'PaymentsForTaxesRelatedToNetShareSettlementOfEquityAwards':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Payments For Taxes Related To Net Share Settlement Of Equity Awards: ' + str(ARCHvalue))
                            PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward.append(ARCHvalue)
                        if key == 'ExcessTaxBenefitsFromEquityAwards':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Excess Tax Benefits From Equity Awards: ' + str(ARCHvalue))
                            PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward.append(ARCHvalue)
                        else:
                            pass
                    cf.PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward = sum(PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward)
                except:
                    pass
                #
                # Proceeds From Issuance Of Long Term Debt
                try:
                    ProceedsFromIssuanceOfLongTermDebt = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ProceedsFromIssuanceOfLongTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Issuance Of Long Term Debt: ' + str(ARCHvalue))
                            ProceedsFromIssuanceOfLongTermDebt.append(ARCHvalue)
                        if key == 'ProceedsFromIssuanceOfTermDebtNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Issuance Of Term Debt Net: ' + str(ARCHvalue))
                            ProceedsFromIssuanceOfLongTermDebt.append(ARCHvalue)
                        else:
                            pass
                    cf.ProceedsFromIssuanceOfLongTermDebt = sum(ProceedsFromIssuanceOfLongTermDebt)
                except:
                    pass
                #
                # Repayments Of Long Term Debt
                try:
                    RepaymentsOfLongTermDebt = []
                    for key,value in CashFlowStatement.items():
                        if key == 'RepaymentsOfLongTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repayments Of Long Term Debt: ' + str(ARCHvalue))
                            RepaymentsOfLongTermDebt.append(ARCHvalue)
                        if key == 'RepaymentsOfTermDebt':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repayments Of Term Debt: ' + str(ARCHvalue))
                            RepaymentsOfLongTermDebt.append(ARCHvalue)
                        else:
                            pass
                    cf.RepaymentsOfLongTermDebt = sum(RepaymentsOfLongTermDebt)
                except:
                    pass
                #
                # Proceeds From Repayments Of Commercial Paper
                try:
                    ProceedsFromRepaymentsOfCommercialPaper = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ProceedsFromRepaymentsOfCommercialPaper':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Repayments Of Commercial Paper: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        if key == 'ProceedsFromRepaymentsOfCommercialPaperNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Repayments Of Commercial Paper, Net: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        if key == 'ChangeInCommercialPaperNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Commercial Paper Net: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        if key == 'ChangeInCommercialPaperNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change In Commercial Paper Net: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        if key == 'RepaymentsOfCommercialPaperNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Repayments Of Commercial Paper Net: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        if key == 'ChangeInCommercialPaperNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Change InCommercial Paper, Net: ' + str(ARCHvalue))
                            ProceedsFromRepaymentsOfCommercialPaper.append(ARCHvalue)
                        else:
                            pass
                    cf.ProceedsFromRepaymentsOfCommercialPaper = sum(ProceedsFromRepaymentsOfCommercialPaper)
                except:
                    pass
                #
                # Other Financing Activities
                try:
                    OtherFinancingActivities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'ProceedsFromPaymentsForOtherFinancingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Payments For Other Financing Activities: ' + str(ARCHvalue))
                            OtherFinancingActivities.append(ARCHvalue)
                        if key == 'ProceedsFromRepaymentsOfBankOverdrafts':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Proceeds From Repayments Of Bank Overdrafts: ' + str(ARCHvalue))
                            OtherFinancingActivities.append(ARCHvalue)
                        else:
                            pass
                    cf.OtherFinancingActivities = sum(OtherFinancingActivities)
                except:
                    pass
                #
                # Total Financing Activities
                try:
                    FinancingActivities = []
                    for key,value in CashFlowStatement.items():
                        if key == 'NetCashProvidedByUsedInFinancingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Net Cash Provided By Used In Financing Activities: ' + str(ARCHvalue))
                            FinancingActivities.append(ARCHvalue)
                        if key == 'CashUsedInFinancingActivities':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Used In Financing Activities: ' + str(ARCHvalue))
                            FinancingActivities.append(ARCHvalue)
                        else:
                            pass
                    a.FinancingActivities = sum(FinancingActivities)
                    #
                    print('\n' * 3)
                except:
                    pass
                #
                # supplemental cash flow disclosure
                print('supplemental cash flow disclosure')
                print(137*'-')
                #
                # Cash paid for taxes
                try:
                    CashPaidForTaxes = []
                    for key,value in CashFlowStatement.items():
                        if key == 'CashPaidForIncomeTaxesNet':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Paid For Income Taxes, Net: ' + str(ARCHvalue))
                            CashPaidForTaxes.append(ARCHvalue)
                        else:
                            pass
                    cf.CashPaidForTaxes = sum(CashPaidForTaxes)
                except:
                    pass 
                #
                # Cash paid for in interest
                try:
                    CashPaidForInterest = []
                    for key,value in CashFlowStatement.items():
                        if key == 'CashPaidForInterest':
                            try:
                                i = 0
                                while value[i] == None:
                                    i = i + 1
                                ARCHvalue = value[i]
                                value[i] = None
                            except:
                                if value != None:
                                    ARCHvalue = value
                                    CashFlowStatement[key] = None
                                else:
                                    ARCHvalue = 0
                            print('Cash Paid For Interest: ' + str(ARCHvalue))
                            CashPaidForInterest.append(ARCHvalue)
                        else:
                            pass
                    cf.CashPaidForInterest = sum(CashPaidForInterest)
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    pass 
                #
                # save
                try:
                    try:
                        tb.save()
                        print("Trial Balance Saved.")
                    except:
                        pass
                    try:
                        cf.save()
                        print("Cash Flow Saved.")
                    except:
                        pass
                    try:
                        a.save()
                        print("Audit Saved.")
                    except:
                        pass
                except:
                    pass
            except:
                pass
            #
            print(137*'-')
            #
        except:
            pass
        #
        # number of shares outstanding
        try:
            #
            OutstandingSharesURL = 'https://www.sec.gov/Archives/edgar/data/' + EntityCentralIndexKey + '/' + accessionnumber.replace('-','') + '/' 'R1.htm'
            PublicFloatAndOutstandingShares = fetch(OutstandingSharesURL).find_all('td', class_="nump")
            a.EntityCommonStockSharesOutstanding = 1000 * max(int(float(PublicFloatAndOutstandingShares[0].text.replace(',', '').replace('$', ''))), int(float(PublicFloatAndOutstandingShares[1].text.replace(',', '').replace('$', ''))))
            #
            a.save()
            #
            print('number of shares outstanding: ' + str(a.EntityCommonStockSharesOutstanding))
            print(137*'-')
            #
            print('\n' * 3)
        except:
            pass
        #
        # stock price
        try:
            if GetStockPrice == 'yes':
                #
                if scopedperiod == 'lastyear':
                    #
                    try:
                        #
                        api_result = requests.get('https://api.marketstack.com/v1/tickers/' + TradingSymbol + '/eod', params)
                        #
                        api_response = api_result.json()
                        #
                        api_result_name = api_result.json()['data']['name']
                        api_result_symbol = api_result.json()['data']['symbol']
                        api_result_date = api_result.json()['data']['eod'][0]['date']
                        api_result_stockprice = api_result.json()['data']['eod'][0]['close']
                        #
                        a.StockPrice = api_result_stockprice
                        print(a.StockPrice)
                        a.save()
                    except:
                        print('--Could not establish current Stock Price.')
                #
                else:
                    try:
                        i = -1
                        a.StockPrice = 0
                        DateTimeStockPrice = datetime.datetime.strptime(tb.FilingDate, '%Y-%m-%d')
                        print(DateTimeStockPrice)
                        #
                        while count < 9 :
                            #
                            if a.StockPrice == 0:
                                #
                                try:
                                    DateStockPrice = DateTimeStockPrice - datetime.timedelta(days=i)
                                    DateStockPrice = str(DateStockPrice)[:10]
                                    print(DateStockPrice)
                                    #                                                        
                                    api_result = requests.get('https://api.marketstack.com/v1/tickers/' + TradingSymbol + '/eod/' + DateStockPrice, params)
                                    #
                                    api_response = api_result.json()
                                    #
                                    api_result_stockprice = api_result.json()['close']
                                    #
                                    a.StockPrice = api_result_stockprice
                                    print(a.StockPrice)
                                    a.save()
                                except:
                                    pass
                                #
                                i = i + 1
                            #
                            else:
                                count = 9
                    except:
                        print('---Could not establish Stock Price.')
                print(137*'-')
                print('\n' * 3)                
        except:
            pass
        #
        #
        # stock splits (sec)
        #####
        #
        #
        #####
        #
        # save
        try:
            #
            tb.save()
            cf.save()
            a.save()
            e.save()
            print(e.EntityRegistrantName + ' (' + e.TradingSymbol + '), ' + tb.DocumentPeriodEndDate + ' (' + tb.Period + ') SEC Data Arched.')
            #
            # Delete the content of the download file
            try:
                files = glob.glob('A:/arch/Ï†/algorithm/downloads/*')
                for f in files:
                    os.remove(f)
                #
                print('A:/arch/Ï†/algorithm/downloads/ repository cleared.')
                #
                print(137*'-')
                print('\n' * 3)
            except:
                pass
            #
        except:
            print('---Could not save.')
        #
        print('\n' * 3)
#
# beginning balances, anomalies & regularization
    #
    if BeginningBalances == 'yes':
        #
        # stockholders' equity beginning balance
        for scopedperiod in scopedperiods:
            #
            try:
                print('Beginning Balances for ' + scopedperiod)
                print(137*'-')
                #
                # Model Current Year Beginning Balance
                tb = TrialBalance.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                a = AuditData.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                #
                chronology = {
                    'lastyear': 'secondlastyear',
                    'secondlastyear': 'thirdlastyear',
                    'thirdlastyear': 'fourthlastyear',
                    'fourthlastyear': 'fifthlastyear',
                    'fifthlastyear': 'sixthlastyear',
                    'sixthlastyear': 'seventhlastyear',
                }
                #
                prioryear = chronology[scopedperiod]
                #
                # Model Prior Year Beginning Balance
                try:
                    prioryeartb = TrialBalance.objects.get(TradingSymbol=TradingSymbol, Period=prioryear)
                    prioryeara = AuditData.objects.get(TradingSymbol=TradingSymbol, Period=prioryear)
                    if prioryeara.CommonShares != 0:
                        print('from ' + prioryear + " ending balance (prior year).")
                    else:
                        print('backwards')
                except:
                    pass
                #
                print(137*'-')
                #
                # Common Shares - Beginning Balance
                try:
                    tb.CommonSharesBeginning = prioryeara.CommonShares
                    print('Common Shares Beginning Balance: ' + str(tb.CommonSharesBeginning))
                except:
                    pass
                # backwards
                if tb.CommonSharesBeginning == 0:
                    tb.CommonSharesBeginning = a.CommonShares - tb.CommonStockIssued - tb.ShareBasedCompensation
                    print('Common Shares Beginning Balance: ' + str(tb.CommonSharesBeginning))
                #
                # Retained Earnings - Beginning Balance
                try:
                    tb.RetainedEarningsBeginning = prioryeara.RetainedEarnings
                    print('Retained Earnings Beginning Balance: ' + str(tb.RetainedEarningsBeginning))
                except:
                    pass
                # backwards
                if tb.RetainedEarningsBeginning == 0:
                    tb.RetainedEarningsBeginning = a.RetainedEarnings - tb.DividendsAndDividendEquivalentsDeclared - tb.CommonStockRepurchasedAndRetired - tb.EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts - a.NetIncome
                    print('Retained Earnings Beginning Balance: ' + str(tb.RetainedEarningsBeginning))
                #
                # Accumulated Other Comprehensive Income - Beginning Balance
                try:
                    tb.AccumulatedOtherComprehensiveIncomeBeginning = prioryeara.AccumulatedOtherComprehensiveIncome
                    print('Accumulated Other Comprehensive Income (Loss) Beginning Balance: ' + str(tb.AccumulatedOtherComprehensiveIncomeBeginning))
                except:
                    pass
                # backwards
                if tb.AccumulatedOtherComprehensiveIncomeBeginning == 0:
                    aocib = a.AccumulatedOtherComprehensiveIncome - tb.ChangeInForeignCurrencyTranslationAdjustment - tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments
                    aocib = aocib - tb.ChangeInUnrealizedGainsLossesOnInvestments
                    tb.AccumulatedOtherComprehensiveIncomeBeginning = aocib
                    print('Accumulated Other Comprehensive Income (Loss) Beginning Balance: ' + str(tb.AccumulatedOtherComprehensiveIncomeBeginning))
                #
                # Employee Benefit Trust - Beginning Balance
                try:
                    tb.EmployeeBenefitTrust = prioryeara.EmployeeBenefitTrust
                    print('Employee Benefit Trust Beginning Balance: ' + str(tb.EmployeeBenefitTrustBeginning))
                except:
                    pass
                # backwards
                if tb.EmployeeBenefitTrustBeginning == 0:
                    # ++
                    tb.EmployeeBenefitTrustBeginning = a.EmployeeBenefitTrust
                    print('Employee Benefit Trust Beginning Balance: ' + str(tb.EmployeeBenefitTrustBeginning))
                #
                # Non Controling Interest - Beginning Balance
                try:
                    tb.NonControllingInterest = prioryeara.NonControllingInterest
                    print('Non-Controling Interests Beginning Balance: ' + str(tb.NonControlingInterestsBeginning))
                except:
                    pass
                # backwards
                if tb.NonControllingInterestsBeginning == 0:
                    # ++
                    tb.NonControllingInterestsBeginning = a.NonControllingInterest
                    print('Non-Controlling Interests Beginning Balance: ' + str(tb.NonControllingInterestsBeginning))
            #
            except:
                print('---Could not establish beginning balances.')
        #
        tb.save()
        #
        print(137 * '-')
        print('\n' * 3)
        #
        # anomalies & corrections
        if Regularize == 'yes':
            #
            print('anomalies and regularizations for ' + tb.Period)
            print(137*'-')
            print('\n' * 3)
            #
            try:
                #
                #
                # current assets
                try:
                    print('Cash: ' + str(tb.Cash) + ' $')
                    print('Short Term Investments: ' + str(tb.ShortTermInvestments) + ' $')
                    print('Accounts Receivable: ' + str(tb.AccountsReceivable) + ' $')
                    print('Inventories: ' + str(tb.Inventories) + ' $')
                    print('Prepaid Expenses: ' + str(tb.PrepaidExpenses) + ' $')
                    print('Non Trade Receivables: ' + str(tb.NonTradeReceivables) + ' $')
                    print('Deferred Tax Assets: ' + str(tb.DeferredTaxAssets) + ' $')
                    print('Other Current Assets: ' + str(tb.OtherCurrentAssets) + ' $')
                    print('Discontinued Operations: ' + str(tb.DiscontinuedOperations) + ' $')
                    print(' == Total Current Assets: ' + str(a.CurrentAssets) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.Cash,
                        tb.ShortTermInvestments,
                        tb.AccountsReceivable,
                        tb.Inventories,
                        tb.PrepaidExpenses,
                        tb.NonTradeReceivables,
                        tb.DeferredTaxAssets,
                        tb.OtherCurrentAssets,
                        tb.DiscontinuedOperationsCurrent,
                    ]
                    Total = a.CurrentAssets
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.OtherCurrentAssets = tb.OtherCurrentAssets - Anomaly
                    #
                    if Anomaly != 0:
                        print(137*'-')
                        #
                        print('Other Current Assets ' + str(tb.OtherCurrentAssets))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Current Assets.')
                #
                #
                # non-current assets
                try:
                    #
                    # non current assets
                    print('Investments: ' + str(tb.Investments) + ' $')
                    print('Property Plant And Equipment: ' + str(tb.PropertyPlantAndEquipment) + ' $')
                    print('Operating Lease Right Of Use Asset: ' + str(tb.OperatingLeaseRightOfUseAssets) + ' $')
                    print('Finance Lease Right Of Use Asset: ' + str(tb.FinanceLeaseRightOfUseAssets) + ' $')
                    print('Intangible Assets: ' + str(tb.IntangibleAssets) + ' $')
                    print('Goodwill: ' + str(tb.Goodwill) + ' $')
                    print('Deferred Tax Assets Non Current: ' + str(tb.DeferredTaxAssetsNonCurrent) + ' $')
                    print('Other Non Current Assets: ' + str(tb.OtherNonCurrentAssets) + ' $')
                    print(' == Total Non Current Assets: ' + str(a.NonCurrentAssets) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.Investments,
                        tb.PropertyPlantAndEquipment,
                        tb.OperatingLeaseRightOfUseAssets,
                        tb.FinanceLeaseRightOfUseAssets,
                        tb.IntangibleAssets,
                        tb.Goodwill,
                        tb.DeferredTaxAssetsNonCurrent,
                        tb.OtherNonCurrentAssets,
                        tb.DiscontinuedOperations,
                    ]
                    Total = a.NonCurrentAssets
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.OtherNonCurrentAssets = tb.OtherNonCurrentAssets - Anomaly
                    #
                    if Anomaly != 0:
                        print(137*'-')
                        #
                        print('Other Non Current Assets: ' + str(tb.OtherNonCurrentAssets))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Non-Current Assets .')
                #
                #
                # assets
                print(' === Total Assets: ' + str(a.Assets) + ' $')
                print(137*'-')
                print('\n' * 3)
                #
                #
                # current liabilities
                try:
                    print('Accounts Payable And Accrued Liabilities: ' + str(tb.AccountsPayableAndAccruedLiabilities) + ' $')
                    print('Employee Compensation: ' + str(tb.EmployeeCompensationCurrent) + ' $')
                    print('Operating Leases Current: ' + str(tb.OperatingLeasesCurrent) + ' $')
                    print('Finance Leases Current: ' + str(tb.FinanceLeasesCurrent) + ' $')
                    print('Capital Lease And Financing Obligations Current: ' + str(tb.CapitalLeaseAndFinancingObligationsCurrent) + ' $')
                    print('Deferred Revenue And Deposits Current: ' + str(tb.DeferredRevenueAndDepositsCurrent) + ' $')
                    print('Accrued Tax Liabilities: ' + str(tb.AccruedTaxLiabilities) + ' $')
                    print('Deferred Tax Liabilities Current: ' + str(tb.DeferredTaxLiabilitiesCurrent) + ' $')
                    print('Commercial Papers: ' + str(tb.CommercialPapers) + ' $')
                    print('Discontinued Operations Liabilities Current: ' + str(tb.DiscontinuedOperationsLiabilitiesCurrent) + ' $')
                    print('Dividends Payable: ' + str(tb.DividendsPayable) + ' $')
                    print('Other Short Term Borrowings: ' + str(tb.OtherShortTermBorrowings) + ' $')
                    print('Short Term Portion Of Long Term Debt: ' + str(tb.ShortTermPortionOfLongTermDebt) + ' $')
                    print(' == Total Current Liabilities: ' + str(a.CurrentLiabilities) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.AccountsPayableAndAccruedLiabilities,
                        tb.EmployeeCompensationCurrent,
                        tb.OperatingLeasesCurrent,
                        tb.FinanceLeasesCurrent,
                        tb.CapitalLeaseAndFinancingObligationsCurrent,
                        tb.DeferredRevenueAndDepositsCurrent,
                        tb.AccruedTaxLiabilities,
                        tb.DeferredTaxLiabilitiesCurrent,
                        tb.CommercialPapers,
                        tb.DiscontinuedOperationsLiabilitiesCurrent,
                        tb.DividendsPayable,
                        tb.OtherShortTermBorrowings,
                        tb.ShortTermPortionOfLongTermDebt,
                    ]
                    Total = a.CurrentLiabilities
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.OtherShortTermBorrowings = tb.OtherShortTermBorrowings - Anomaly
                    #
                    if Anomaly != 0:
                        print(137*'-')
                        #
                        print('Other short term borrowings: ' + str(tb.OtherShortTermBorrowings))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Current Liabilities.')
                #
                #
                # non-current liabilities
                try:
                    print('Long Term Debt: ' + str(tb.LongTermDebt) + ' $')
                    print('Retirement Benefits: ' + str(tb.RetirementBenefits) + ' $')
                    print('Operating Leases Non-Current: ' + str(tb.OperatingLeasesNonCurrent) + ' $')
                    print('Finance Leases Non-Current: ' + str(tb.FinanceLeasesNonCurrent) + ' $')
                    print('Capital Lease And Financing Obligations Non Current: ' + str(tb.CapitalLeaseAndFinancingObligationsNonCurrent) + ' $')
                    print('Deferred Revenue and Deposits Non Current: ' + str(tb.DeferredRevenueAndDepositsNonCurrent) + ' $')
                    print('Accrued Tax Liabilities Non Current: ' + str(tb.AccruedTaxLiabilitiesNonCurrent) + ' $')
                    print('Deferred Tax Liabilities Non Current: ' + str(tb.DeferredTaxLiabilitiesNonCurrent) + ' $')
                    print('Other Non Current Liabilities: ' + str(tb.OtherNonCurrentLiabilities) + ' $')
                    print('Discontinued Operations Liabilities Non Current: ' + str(tb.DiscontinuedOperationsLiabilitiesNonCurrent) + ' $')
                    print(' == Total Non Current Liabilities: ' + str(a.NonCurrentLiabilities) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.LongTermDebt,
                        tb.RetirementBenefits,
                        tb.OperatingLeasesNonCurrent,
                        tb.FinanceLeasesNonCurrent,
                        tb.CapitalLeaseAndFinancingObligationsNonCurrent,
                        tb.DeferredRevenueAndDepositsNonCurrent,
                        tb.AccruedTaxLiabilitiesNonCurrent,
                        tb.DeferredTaxLiabilitiesNonCurrent,
                        tb.OtherNonCurrentLiabilities,
                        tb.DiscontinuedOperationsLiabilitiesNonCurrent,
                    ]
                    if a.NonCurrentLiabilities == 0:
                        if a.Liabilities == 0:
                            a.Liabilities = a.LiabilitiesAndStockholdersEquity - a.StockholdersEquity
                        a.NonCurrentLiabilities = a.Liabilities - a.CurrentLiabilities
                    #
                    Total = a.NonCurrentLiabilities
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.OtherNonCurrentLiabilities = tb.OtherNonCurrentLiabilities - Anomaly            
                    if Anomaly != 0:
                        print(137*'-')
                        #
                        print('Other Non-Current Liabilities: ' + str(tb.OtherNonCurrentLiabilities))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Non-Current Liabilities.')
                #
                #
                # liabilities
                print(' === Total Liabilities: ' + str(a.Liabilities) + ' $')
                print(137*'-')
                print('\n' * 3)
                #
                #
                # gross margin
                try:
                    print('Sales: ' + str(tb.Sales) + ' $')
                    print('Cost Of Sales: ' + str(tb.CostOfSales) + ' $')
                    print(' = Gross Margin: ' + str(a.GrossMargin) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.Sales,
                        tb.CostOfSales,
                    ]
                    if a.GrossMargin == 0:
                        a.GrossMargin = sum(Components)
                        print(' = Gross Margin: ' + str(a.GrossMargin) + ' $, based on components')
                    #
                    Total = a.GrossMargin
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    if tb.Sales == 0:
                        tb.Sales = Anomaly
                    elif tb.CostOfSales == 0:
                        tb.CostOfSales = Anomaly
                    else:
                        if Anomaly > 0:
                            tb.Sales = tb.Sales - Anomaly
                        else:
                            tb.CostOfSales = tb.CostOfSales - Anomaly
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Gross Margin.')
                #
                #
                # operating expenses
                try:
                    print('Research And Development: ' + str(tb.ResearchAndDevelopment) + ' $')
                    print('Selling General Administrative And Marketing: ' + str(tb.SellingGeneralAdministrativeAndMarketing) + ' $')
                    print(' = Operating Expenses: ' + str(a.OperatingExpenses) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.ResearchAndDevelopment,
                        tb.SellingGeneralAdministrativeAndMarketing,
                    ]
                    if a.OperatingExpenses == 0:
                        #
                        if a.OperatingIncome == 0:
                            a.OperatingIncome = a.GrossMargin + sum(Components)
                            print(' = Operating Income: ' + str(a.OperatingIncome) + ' $, based on components')
                        #
                        a.OperatingExpenses = a.OperatingIncome - a.GrossMargin
                        print(' = Operating Expense: ' + str(a.OperatingExpenses) + ' $, based on difference in operating income and gross margin.')
                    #
                    Total = a.OperatingExpenses
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.SellingGeneralAdministrativeAndMarketing = tb.SellingGeneralAdministrativeAndMarketing - Anomaly
                    #
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Selling, Administrative And Marketing: ' + str(tb.SellingGeneralAdministrativeAndMarketing))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Operating Expenses.')
                #
                #
                # operating income
                try:
                    print(' = Operating Income: ' + str(a.OperatingIncome) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        a.GrossMargin,
                        a.OperatingExpenses,
                    ]
                    Total = a.OperatingIncome
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Operating Income.')
                #
                #
                # income before taxes
                try:
                    print('Non Operating Expense (Income): ' + str(tb.NonOperatingIncome) + ' $')
                    print('Impairment Restructuring And Other Special Charges: ' + str(tb.ImpairmentRestructuringAndOtherSpecialCharges) + ' $')
                    print(' = Income Before Taxes: ' + str(a.IncomeBeforeTaxes) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        a.OperatingIncome,
                        tb.ImpairmentRestructuringAndOtherSpecialCharges,
                        tb.NonOperatingIncome,
                    ]
                    Total = a.IncomeBeforeTaxes
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.NonOperatingIncome = tb.NonOperatingIncome - Anomaly
                    #
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Non Operating Income: ' + str(tb.NonOperatingIncome))
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Income Before Taxes.')
                #
                #
                # net income
                try:
                    print('Income Tax Expense Benefit: ' + str(tb.IncomeTaxExpenseBenefit) + ' $')
                    print('Net Income From Discontinued Operations: ' + str(tb.NetIncomeFromDiscontinuedOperations) + ' $')
                    print(' == Net Income: ' + str(a.NetIncome) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        a.IncomeBeforeTaxes,
                        tb.IncomeTaxExpenseBenefit,
                        tb.NetIncomeFromDiscontinuedOperations,
                    ]
                    Total = a.NetIncome
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Net Income.')
                #
                #
                # other comprehensive income
                try:
                    print('Change In Foreign Currency Translation Adjustment Net Of Taxes: ' + str(tb.ChangeInForeignCurrencyTranslationAdjustment) + ' $')
                    print('Change In Unrealized Gains (Losses) On Derivative Instruments, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments) + ' $')
                    print('Change In Unrealized Gains (Losses) On Investment, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnInvestments) + ' $')
                    print('Change In Defined Benefit Pension And Other Similar Plans: ' + str(tb.ChangeInDefinedBenefitPensionAndOtherSimilarPlans) + ' $')
                    print('Income Tax On Other Comprehensive Income: ' + str(tb.IncomeTaxOnOtherComprehensiveIncome) + ' $')
                    #
                    print(' = Other Comprehensive Income: ' + str(a.OtherComprehensiveIncome) + ' $')
                    #
                    print('Net Income: ' + str(a.NetIncome) + ' $')
                    print('Comprehensive Income: ' + str(a.ComprehensiveIncome) + ' $')
                    #
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.ChangeInForeignCurrencyTranslationAdjustment,
                        tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments,
                        tb.ChangeInUnrealizedGainsLossesOnInvestments,
                        tb.ChangeInDefinedBenefitPensionAndOtherSimilarPlans,
                        tb.IncomeTaxOnOtherComprehensiveIncome,
                    ]
                    #
                    Total = a.OtherComprehensiveIncome
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.ChangeInUnrealizedGainsLossesOnInvestments = tb.ChangeInUnrealizedGainsLossesOnInvestments - Anomaly
                    #
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Change In Unrealized Gains (Losses) On Investments, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnInvestments))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Other Comprehensive Income.')
                #
                #
                # common shares
                try:
                    print('Common Shares Beginning Balance: ' + str(tb.CommonSharesBeginning) + ' $')
                    print('Common Stock Issued: ' + str(tb.CommonStockIssued) + ' $')
                    print('Share Based Compensation: ' + str(tb.ShareBasedCompensation) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.CommonSharesBeginning,
                        tb.CommonStockIssued,
                        tb.ShareBasedCompensation,
                    ]
                    #
                    Total = a.CommonShares
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.ShareBasedCompensation = tb.ShareBasedCompensation - Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Share Based Compensation: ' + str(tb.ShareBasedCompensation))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Common Shares.')
                #
                #
                # accumulated other comprehensive income
                try:
                    print('Accumulated Other Comprehensive Income Beginning Balance: ' + str(tb.AccumulatedOtherComprehensiveIncomeBeginning) + ' $')
                    print('Change In Foreign Currency Translation Adjustment Net Of Taxes: ' + str(tb.ChangeInForeignCurrencyTranslationAdjustment) + ' $')
                    print('Change In Unrealized Gains (Losses) On Derivative Instruments, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments) + ' $')
                    print('Change In Unrealized Gains (Losses) On Investment, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnInvestments) + ' $')
                    print('Change In Defined Benefit Pension And Other Similar Plans: ' + str(tb.ChangeInDefinedBenefitPensionAndOtherSimilarPlans) + ' $')
                    print('Income Tax On Other Comprehensive Income: ' + str(tb.IncomeTaxOnOtherComprehensiveIncome) + ' $')
                    print(' = Other Comprehensive Income: ' + str(a.OtherComprehensiveIncome) + ' $')
                    print('Accumulated Other Comprehensive Income Ending Balance: ' + str(a.AccumulatedOtherComprehensiveIncome) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.AccumulatedOtherComprehensiveIncomeBeginning,
                        tb.ChangeInForeignCurrencyTranslationAdjustment,
                        tb.ChangeInUnrealizedGainsLossesOnDerivativeInstruments,
                        tb.ChangeInUnrealizedGainsLossesOnInvestments,
                        tb.ChangeInDefinedBenefitPensionAndOtherSimilarPlans,
                        tb.IncomeTaxOnOtherComprehensiveIncome,
                    ]
                    #
                    Total = a.AccumulatedOtherComprehensiveIncome
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.ChangeInUnrealizedGainsLossesOnInvestments = tb.ChangeInUnrealizedGainsLossesOnInvestments - Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Change In Unrealized Gains (Losses) On Investments, Net Of Taxes: ' + str(tb.ChangeInUnrealizedGainsLossesOnInvestments))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                except:
                    print('---Could Not Examinate Accumulated Other Compregensive Income (Loss).')
                #
                # 
                # retained earnings
                try:
                    print('Retained Earnings Beginning Balance: ' + str(tb.RetainedEarningsBeginning) + ' $')
                    print('Dividends And Dividend Equivalents Declared: ' + str(tb.DividendsAndDividendEquivalentsDeclared) + ' $')
                    print('Common Stock Repurchased And Retired: ' + str(tb.CommonStockRepurchasedAndRetired) + ' $')
                    print('Effect Of Adoption Of New Accounting Pronouncement Or Tax Cuts: ' + str(tb.EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts) + ' $')
                    print('Retained Earnings, Others: ' + str(tb.RetainedEarningsOthers) + ' $')
                    print('Net Income: ' + str(a.NetIncome) + ' $')
                    print('Retained Earnings Ending Balance: ' + str(a.RetainedEarnings) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        tb.RetainedEarningsBeginning,
                        tb.DividendsAndDividendEquivalentsDeclared,
                        tb.CommonStockRepurchasedAndRetired,
                        tb.EffectOfAdoptionOfNewAccountingPronouncementOrTaxCuts,
                        a.NetIncome,
                    ]
                    #
                    Total = a.RetainedEarnings
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.RetainedEarningsOthers = -Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Other Adjustment Affecting Retained Earnings: ' + str(tb.RetainedEarningsOthers))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Retained Earnings.')
                #
                #
                # shareholders equity
                try:
                    print('Common Shares - Ending Balance: ' + str(a.CommonShares) + ' $')
                    print('Accumulated Other Comprehensive Income - Ending Balance: ' + str(a.AccumulatedOtherComprehensiveIncome) + ' $')
                    print('Retained Earnings - Ending Balance: ' + str(a.RetainedEarnings) + ' $')
                    print(' == Stockholders Equity: ' + str(a.StockholdersEquity) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        a.CommonShares,
                        a.AccumulatedOtherComprehensiveIncome,
                        a.RetainedEarnings,
                    ]
                    Total = a.StockholdersEquity
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    tb.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Shareholders Equity.')
                #
                #
                # save
                try:
                    tb.save()
                except:
                    print('---Could not save Trial Balance.')
            except:
                print('---Could not examinate Trial Balance.')
            #
            # 
            # cash flow 
            try:
                cf = CashFlow.objects.get(TradingSymbol=TradingSymbol, Period=scopedperiod)
                #
                #
                # operating activities
                try:
                    print('Net Income: ' + str(-a.NetIncome) + ' $')
                    print('Depreciation Depletion And Amortization: ' + str(cf.DepreciationDepletionAndAmortization) + ' $')
                    print('Share Based Compensation Operating Activities: ' + str(cf.ShareBasedCompensation) + ' $')
                    print('Deferred Income Tax Expense (Benefit): ' + str(cf.DeferredIncomeTaxExpenseBenefit) + ' $')
                    print('Other Non Cash Income Expense: ' + str(cf.OtherNonCashIncomeExpense) + ' $')
                    print('Increase (Decrease) In Accounts Receivable: ' + str(cf.IncreaseDecreaseInAccountsReceivable) + ' $')
                    print('Increase (Decrease) In Inventories: ' + str(cf.IncreaseDecreaseInInventories) + ' $')
                    print('Increase (Decrease) In Other Receivables: ' + str(cf.IncreaseDecreaseInOtherReceivables) + ' $')
                    print('Increase (Decrease) In Accounts Payable: ' + str(cf.IncreaseDecreaseInAccountsPayableAndAccruedLiabilities) + ' $')
                    print('Increase (Decrease) In Contract With Customer Liability: ' + str(cf.IncreaseDecreaseInContractWithCustomerLiability) + ' $')
                    print('Increase (Decrease) In Other Operating Activities: ' + str(cf.IncreaseDecreaseInOtherOperatingActivities) + ' $')
                    print(' == Operating Activities: ' + str(a.OperatingActivities) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        -a.NetIncome,
                        cf.DepreciationDepletionAndAmortization,
                        cf.ShareBasedCompensation,
                        cf.DeferredIncomeTaxExpenseBenefit,
                        cf.OtherNonCashIncomeExpense,
                        cf.IncreaseDecreaseInAccountsReceivable, 
                        cf.IncreaseDecreaseInInventories,
                        cf.IncreaseDecreaseInOtherReceivables,
                        cf.IncreaseDecreaseInAccountsPayableAndAccruedLiabilities,
                        cf.IncreaseDecreaseInContractWithCustomerLiability,
                        cf.IncreaseDecreaseInOtherOperatingActivities,
                    ]
                    Total = a.OperatingActivities
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    cf.IncreaseDecreaseInOtherOperatingActivities = cf.IncreaseDecreaseInOtherOperatingActivities - Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Increase (Decrease) In Other Operating Activities: ' + str(cf.IncreaseDecreaseInOtherOperatingActivities))
                    #
                    cf.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Operating Activities.') 
                #
                #
                # investing activities
                try:
                    print('Payments To Acquire Property Plant And Equipment: ' + str(cf.PaymentsToAcquirePropertyPlantAndEquipment) + ' $')
                    print('Payments To Acquire Investment: ' + str(cf.PaymentsToAcquireInvestments) + ' $')
                    print('Proceeds Of Investment: ' + str(cf.ProceedsOfInvestments) + ' $')
                    print('Payments To Acquire Businesses and Intangibles, Net Of Cash Acquired: ' + str(cf.PaymentsToAcquireBusinessesAndIntangibles) + ' $')
                    print('Other Investing Activities: ' + str(cf.OtherInvestingActivities) + ' $')
                    print(' == Investing Activities: ' + str(a.InvestingActivities) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        cf.PaymentsToAcquirePropertyPlantAndEquipment,
                        cf.PaymentsToAcquireInvestments,
                        cf.ProceedsOfInvestments,
                        cf.PaymentsToAcquireBusinessesAndIntangibles,
                        cf.OtherInvestingActivities,
                    ]
                    Total = a.InvestingActivities
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    cf.OtherInvestingActivities = cf.OtherInvestingActivities - Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Other Investing Activities: ' + str(cf.OtherInvestingActivities))
                    #
                    cf.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Investing Activities.') 
                #
                #
                # financing activities
                try:
                    print('Finance Lease Principal Payments: ' + str(cf.FinanceLeasePrincipalPayments) + ' $')
                    print('Proceeds From Issuance Of Common Stock: ' + str(cf.ProceedsFromIssuanceOfCommonStock) + ' $')
                    print('Payments Related To Tax Withholding For Share Based Compensation: ' + str(cf.PaymentsRelatedToTaxWithholdingForShareBasedCompensation) + ' $')
                    print('Payments Of Dividends: ' + str(cf.PaymentsOfDividends) + ' $')
                    print('Payments For Repurchase Of Common Stock: ' + str(cf.PaymentsForRepurchaseOfCommonStock) + ' $')
                    print('Payments For Taxes Related To Net Share Settlement Of Equity Award: ' + str(cf.PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward) + ' $')
                    print('Proceeds From Issuance Of Long Term Debt: ' + str(cf.ProceedsFromIssuanceOfLongTermDebt) + ' $')
                    print('Repayments Of Long Term Debt: ' + str(cf.RepaymentsOfLongTermDebt) + ' $')
                    print('Proceeds From Repayments Of Commercial Paper: ' + str(cf.ProceedsFromRepaymentsOfCommercialPaper) + ' $')
                    print('Other Financing Activities: ' + str(cf.OtherFinancingActivities) + ' $')
                    print(' == Financing Activities: ' + str(a.FinancingActivities) + ' $')
                    print(137*'-')
                except:
                    pass
                try:
                    Anomaly = 0
                    Components = [
                        cf.FinanceLeasePrincipalPayments,
                        cf.ProceedsFromIssuanceOfCommonStock,
                        cf.PaymentsRelatedToTaxWithholdingForShareBasedCompensation,
                        cf.PaymentsOfDividends,
                        cf.PaymentsForRepurchaseOfCommonStock,
                        cf.PaymentsForTaxesRelatedToNetShareSettlementOfEquityAward,
                        cf.ProceedsFromIssuanceOfLongTermDebt,
                        cf.RepaymentsOfLongTermDebt,
                        cf.ProceedsFromRepaymentsOfCommercialPaper,
                        cf.OtherFinancingActivities,
                    ]
                    Total = a.FinancingActivities
                    #
                    Components = sum(Components)
                    print('Components: ' + str(Components))
                    print('Total: ' + str(Total))
                    Anomaly = Components - Total
                    print('Anomaly: ' + str(Anomaly))
                    #
                    cf.OtherFinancingActivities = cf.OtherFinancingActivities - Anomaly
                    if Anomaly != 0:
                        #
                        print(137*'-')
                        #
                        print('Other Financing Activities: ' + str(cf.OtherFinancingActivities))
                    #
                    cf.save()
                    a.save()
                    #
                    print(137*'-')
                    print('\n' * 3)
                    #
                except:
                    print('---Could Not Examinate Financing Activities.') 
                #
                #
                # supplemental information
                try:
                    # cash beginning balance
                    print('=== Cash Beginning Balance: ' + str(cf.CashBeginningBalance) + ' $')
                    print(137*'-')
                    print('\n' * 3)
                    #
                    # cash paid for interest and taxes
                    print('=== Cash Paid For Taxes: ' + str(cf.CashPaidForTaxes) + ' $')
                    print('=== Cash Paid For Interest: ' + str(cf.CashPaidForInterest) + ' $')
                    print(137*'-')
                    print('\n' * 3)
                    #
                    cf.save()
                    a.save()
                    #
                except:
                    pass
            #
            except:
                print('---Could not examinate Trial Balance & Cash Flow.')
            #
            print('\n' * 3)
    #
    #
    # save entity and update date time
    try:
        # Time Of Update
        today = date.today()
        date_text = today.strftime("%B %d, %Y")
        e.Update = date_text
        print("Update: ", e.Update)
        #
        # save
        e.save()
        print('Entity ' + TradingSymbol + ' Saved.')
        #
        # output directory
        output_directory = './Ï†/algorithm/GL/'
        files = glob.glob('A:/arch/Ï†/algorithm/GL/*')
        for f in files:
            os.remove(f)
    except:
        print('---Could not save entity.')

